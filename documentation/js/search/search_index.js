var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Graph.html",[0,0.03,1,1.407]],["body/classes/Graph.html",[0,0.016,1,2.174,2,0.34,3,0.405,4,0.918,5,0.34,6,1.121,7,0.229,8,0.445,9,4.087,10,1.043,11,2.244,12,2.244,13,2.244,14,2.244,15,2.244,16,0.641,17,0.538,18,0.063,19,1.065,20,1.461,21,1.044,22,1.42,23,2.244,24,2.704,25,4.087,26,1.42,27,1.469,28,3.428,29,0.982,30,0.982,31,0.825,32,0.982,33,2.196,34,3.16,35,3.16,36,1.846,37,1.469,38,2.244,39,1.42,40,1.065,41,2.244,42,1.42,43,2.244,44,2.244,45,2.24,46,2.244,47,2.244,48,2.244,49,1.42,50,1.599,51,2.244,52,2.244,53,2.244,54,1.42,55,0.756,56,0.66,57,0.777,58,0.405,59,1.78,60,1.42,61,1.42,62,1.42,63,0.924,64,1.42,65,1.42,66,1.42,67,1.42,68,1.42,69,1.42,70,1.228,71,1.42,72,1.42,73,1.42,74,0.66,75,1.42,76,1.42,77,1.043,78,1.42,79,1.42,80,1.42,81,1.42,82,0.028,83,0.028]],["title/classes/LinkedList.html",[0,0.03,84,1.407]],["body/classes/LinkedList.html",[0,0.014,2,0.297,3,0.354,4,0.297,5,0.297,7,0.2,8,0.4,10,0.936,16,0.575,17,0.962,18,0.063,19,1.274,21,1.036,27,0.936,29,0.726,30,0.726,31,0.826,32,0.726,36,1.495,37,1.181,40,1.597,55,0.857,56,0.577,57,0.679,58,0.354,59,1.601,63,1.311,70,1.391,74,1.181,77,1.359,82,0.025,83,0.025,84,1.102,85,2.069,86,2.461,87,0.98,88,1.654,89,1.654,90,3.216,91,1.59,92,1.59,93,2.014,94,1.391,95,2.014,96,2.331,97,1.241,98,1.102,99,1.241,100,2.014,101,1.547,102,1.241,103,1.886,104,2.014,105,1.241,106,2.014,107,2.014,108,2.014,109,3.085,110,2.309,111,1.241,112,2.014,113,2.014,114,2.007,115,3.216,116,1.59,117,2.925,118,3.628,119,2.014,120,1.241,121,2.541,122,2.925,123,1.241,124,1.241,125,1.241,126,0.98,127,2.014,128,1.241,129,2.014,130,1.59,131,1.241,132,1.241,133,1.241,134,3.216,135,1.241,136,2.014,137,1.241,138,2.014,139,2.014,140,1.241,141,2.014,142,1.241]],["title/classes/LinkedListNode.html",[0,0.03,96,1.407]],["body/classes/LinkedListNode.html",[0,0.028,2,0.579,3,0.69,4,0.579,5,0.579,7,0.389,8,0.66,16,0.69,17,1.065,18,0.062,21,1.171,29,0.69,30,0.69,31,0.983,32,0.69,58,0.69,82,0.041,83,0.041,85,2.354,86,2.799,94,1.821,96,2.656,101,1.703,103,2.354,116,3.509,143,1.907,144,4.553,145,4.553,146,1.573,147,3.327,148,2.416,149,2.416,150,1.573,151,2.416,152,2.416]],["title/classes/Node.html",[0,0.03,40,0.866]],["body/classes/Node.html",[0,0.031,2,0.642,3,0.764,4,0.642,5,0.642,7,0.431,8,0.708,16,0.764,17,1.068,18,0.062,21,1.221,29,0.764,30,0.764,31,1.025,32,0.764,40,1.601,55,0.902,58,0.764,82,0.044,83,0.044,94,1.466,98,1.953,101,1.764,146,2.322,150,1.743,153,2.114,154,4.676,155,3.167,156,3.566,157,2.677,158,2.677,159,2.114,160,2.816,161,1.743,162,2.677,163,2.114,164,2.677]],["title/classes/Queue.html",[0,0.03,165,1.195]],["body/classes/Queue.html",[0,0.022,2,0.457,3,0.544,4,0.457,5,0.457,7,0.307,8,0.558,10,1.306,16,0.802,17,0.457,18,0.063,19,0.947,21,1.173,27,1.306,29,0.544,30,0.544,31,0.673,32,0.544,36,1.974,37,0.886,50,1.306,55,0.642,56,0.886,57,1.043,58,0.544,59,0.886,70,1.538,74,1.711,77,0.886,82,0.035,83,0.035,88,2.674,89,1.241,101,1.817,165,2.158,166,1.505,167,2.634,168,3.682,169,2.809,170,2.907,171,2.218,172,2.634,173,3.1,174,1.906,175,1.906,176,2.907,177,2.809,178,1.906,179,2.907,180,1.906,181,1.505,182,1.906,183,1.829,184,1.505,185,1.906,186,1.505,187,2.218,188,2.809,189,1.906,190,1.906,191,1.505,192,1.505,193,1.505]],["title/classes/Stack.html",[0,0.03,194,1.195]],["body/classes/Stack.html",[0,0.022,2,0.445,3,0.531,4,0.445,5,0.445,7,0.299,8,0.547,10,1.282,16,0.787,17,0.445,18,0.063,19,0.929,21,1.162,27,1.282,29,0.531,30,0.531,31,0.661,32,0.531,36,1.958,37,0.864,50,1.282,55,0.626,56,0.864,57,1.017,58,0.531,59,0.864,63,1.21,70,1.51,74,1.691,77,0.864,82,0.034,83,0.034,88,2.649,89,1.21,101,1.849,167,2.596,170,2.872,171,2.177,172,2.596,173,3.067,176,2.872,179,2.872,181,1.467,183,1.795,184,1.467,186,1.467,187,2.177,191,1.467,192,1.467,193,1.467,194,2.147,195,1.467,196,3.637,197,2.757,198,1.858,199,1.858,200,1.858,201,2.757,202,1.858,203,1.858,204,1.858,205,2.757,206,2.757,207,1.858,208,1.858,209,2.757,210,1.858]],["title/classes/Tree.html",[0,0.03,211,1.673]],["body/classes/Tree.html",[0,0.026,2,0.535,3,0.637,4,0.535,5,0.535,7,0.359,8,0.625,10,1.463,16,0.898,17,0.535,18,0.063,19,1.061,20,2.048,21,1.131,27,1.463,29,1.041,30,1.041,31,0.874,32,1.041,36,1.695,37,1.463,40,1.677,50,1.463,55,0.752,58,0.637,59,1.695,74,1.037,82,0.039,83,0.039,91,2.485,92,2.485,98,1.996,126,2.485,211,2.961,212,1.761,213,3.646,214,3.147,215,2.23,216,3.147,217,2.23,218,3.147,219,2.23,220,3.147,221,2.23,222,2.23,223,2.23,224,2.23]],["title/classes/Vertex.html",[0,0.03,24,1.407]],["body/classes/Vertex.html",[0,0.029,2,0.594,3,0.708,4,0.594,5,0.594,7,0.399,8,0.672,16,0.967,17,1.074,18,0.062,19,1.141,20,2.698,21,1.239,24,2.111,29,0.708,30,0.708,31,1.04,32,1.101,45,2.51,55,1.141,58,0.708,82,0.042,83,0.042,94,1.357,98,1.854,101,1.718,146,2.204,150,1.613,155,3.045,159,1.957,160,2.673,161,1.613,163,1.957,225,1.957,226,3.856,227,3.856,228,3.386,229,2.478,230,3.045,231,2.478,232,2.478,233,2.478,234,2.478,235,2.478]],["title/coverage.html",[236,2.259]],["body/coverage.html",[0,0.056,1,1.546,5,0.677,6,2.23,18,0.061,19,0.952,24,1.546,31,0.677,40,0.952,77,2.03,82,0.045,83,0.045,84,1.546,85,2.023,86,2.405,87,2.23,96,1.546,103,1.546,143,2.23,153,2.23,165,1.313,166,2.23,194,1.313,195,2.23,211,1.838,212,2.23,225,2.23,236,1.838,237,2.23,238,2.824,239,2.824,240,2.824,241,2.824,242,2.824,243,2.23,244,2.824,245,2.23,246,2.824,247,3.695,248,2.824,249,2.824,250,4.118,251,4.118,252,2.824,253,2.824]],["title/dependencies.html",[254,1.709,255,2.432]],["body/dependencies.html",[18,0.058,82,0.055,83,0.055,161,2.52,255,3.056,256,3.871]],["title/miscellaneous/enumerations.html",[257,1.185,258,2.432]],["body/miscellaneous/enumerations.html",[4,0.83,7,0.413,17,1.194,18,0.062,28,2.024,40,0.864,45,1.669,50,1.192,56,1.61,82,0.043,83,0.043,85,1.404,103,1.404,109,2.024,110,2.736,114,2.024,130,2.024,165,1.192,183,2.555,194,1.192,230,2.736,257,1.404,258,2.024,259,2.564,260,2.564,261,3.465,262,2.564,263,3.465,264,2.564,265,2.564,266,2.564,267,2.564,268,2.564,269,2.564,270,2.564,271,2.564,272,2.564,273,2.564,274,2.564,275,2.564,276,2.564,277,2.564,278,3.465,279,3.465,280,3.465,281,2.564,282,2.564,283,3.465,284,3.465,285,3.465,286,2.564,287,2.564]],["title/miscellaneous/functions.html",[257,1.185,288,2.432]],["body/miscellaneous/functions.html",[7,0.609,18,0.054,82,0.054,83,0.054,243,2.987,245,3.708,257,2.071,288,2.987,289,3.783]],["title/index.html",[7,0.348,290,2.164,291,2.164]],["body/index.html",[1,1.689,18,0.048,82,0.048,83,0.048,84,1.689,165,1.434,194,1.434,236,2.546,237,3.088,292,3.39,293,3.39,294,3.088,295,4.761,296,3.911,297,3.085,298,4.836,299,3.085,300,4.294,301,4.294,302,3.911,303,3.085,304,3.911,305,3.911,306,3.911]],["title/modules.html",[307,2.74]],["body/modules.html",[18,0.056,82,0.056,83,0.056,307,3.11]],["title/overview.html",[308,2.74]],["body/overview.html",[2,0.933,18,0.055,82,0.055,83,0.055,308,3.074,309,3.893]],["title/properties.html",[8,0.611,254,1.709]],["body/properties.html",[8,0.718,18,0.061,33,2.858,82,0.053,83,0.053,292,2.858,293,2.858,294,2.858,310,3.619,311,3.619,312,3.619,313,3.619,314,3.619,315,3.619,316,3.619]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":77,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"coverage.html":{}}}],["0/1",{"_index":246,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":247,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":242,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":209,"title":{},"body":{"classes/Stack.html":{}}}],["1.0.0",{"_index":311,"title":{},"body":{"properties.html":{}}}],["3/5",{"_index":251,"title":{},"body":{"coverage.html":{}}}],["3/8",{"_index":249,"title":{},"body":{"coverage.html":{}}}],["37",{"_index":248,"title":{},"body":{"coverage.html":{}}}],["5/7",{"_index":241,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":250,"title":{},"body":{"coverage.html":{}}}],["71",{"_index":240,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":309,"title":{},"body":{"overview.html":{}}}],["8.3.2",{"_index":256,"title":{},"body":{"dependencies.html":{}}}],["accessors",{"_index":171,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["add",{"_index":27,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{}}}],["added",{"_index":133,"title":{},"body":{"classes/LinkedList.html":{}}}],["addedge",{"_index":11,"title":{},"body":{"classes/Graph.html":{}}}],["addedge(source",{"_index":23,"title":{},"body":{"classes/Graph.html":{}}}],["addnode",{"_index":91,"title":{},"body":{"classes/LinkedList.html":{},"classes/Tree.html":{}}}],["addnode(node",{"_index":216,"title":{},"body":{"classes/Tree.html":{}}}],["addnode(value",{"_index":100,"title":{},"body":{"classes/LinkedList.html":{}}}],["addvertex",{"_index":12,"title":{},"body":{"classes/Graph.html":{}}}],["addvertex(vertex",{"_index":38,"title":{},"body":{"classes/Graph.html":{}}}],["ahuja",{"_index":316,"title":{},"body":{"properties.html":{}}}],["already",{"_index":274,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["array",{"_index":47,"title":{},"body":{"classes/Graph.html":{}}}],["array.from(vertex.edges",{"_index":65,"title":{},"body":{"classes/Graph.html":{}}}],["associated",{"_index":43,"title":{},"body":{"classes/Graph.html":{}}}],["author",{"_index":314,"title":{},"body":{"properties.html":{}}}],["before",{"_index":130,"title":{},"body":{"classes/LinkedList.html":{},"miscellaneous/enumerations.html":{}}}],["bool",{"_index":191,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["branchnodes",{"_index":154,"title":{},"body":{"classes/Node.html":{}}}],["build",{"_index":305,"title":{},"body":{"index.html":{}}}],["case",{"_index":136,"title":{},"body":{"classes/LinkedList.html":{}}}],["certain",{"_index":107,"title":{},"body":{"classes/LinkedList.html":{}}}],["class",{"_index":0,"title":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"overview.html":{}}}],["comprised",{"_index":51,"title":{},"body":{"classes/Graph.html":{}}}],["const",{"_index":63,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Stack.html":{}}}],["constructor",{"_index":94,"title":{},"body":{"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Vertex.html":{}}}],["constructor(value",{"_index":146,"title":{},"body":{"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Vertex.html":{}}}],["coverage",{"_index":236,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["current",{"_index":122,"title":{},"body":{"classes/LinkedList.html":{}}}],["current.next",{"_index":124,"title":{},"body":{"classes/LinkedList.html":{}}}],["current.value",{"_index":123,"title":{},"body":{"classes/LinkedList.html":{}}}],["cut",{"_index":284,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["data",{"_index":292,"title":{},"body":{"index.html":{},"properties.html":{}}}],["default",{"_index":16,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}}}],["defined",{"_index":21,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}}}],["dependencies",{"_index":255,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["dequeue",{"_index":168,"title":{},"body":{"classes/Queue.html":{}}}],["description",{"_index":33,"title":{},"body":{"classes/Graph.html":{},"properties.html":{}}}],["destination",{"_index":25,"title":{},"body":{"classes/Graph.html":{}}}],["destination.edges.delete(source.id",{"_index":81,"title":{},"body":{"classes/Graph.html":{}}}],["destination.edges.has(source.id",{"_index":69,"title":{},"body":{"classes/Graph.html":{}}}],["destination.edges.set(source.id",{"_index":73,"title":{},"body":{"classes/Graph.html":{}}}],["destination.edges.size",{"_index":78,"title":{},"body":{"classes/Graph.html":{}}}],["docs",{"_index":306,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":237,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dosomestuff",{"_index":245,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["edge",{"_index":28,"title":{},"body":{"classes/Graph.html":{},"miscellaneous/enumerations.html":{}}}],["edge_exits",{"_index":273,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["edges",{"_index":45,"title":{},"body":{"classes/Graph.html":{},"classes/Vertex.html":{},"miscellaneous/enumerations.html":{}}}],["edges_empty",{"_index":272,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["element",{"_index":176,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["empty",{"_index":183,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{},"miscellaneous/enumerations.html":{}}}],["ending",{"_index":35,"title":{},"body":{"classes/Graph.html":{}}}],["enqueue",{"_index":169,"title":{},"body":{"classes/Queue.html":{}}}],["enqueue(item",{"_index":177,"title":{},"body":{"classes/Queue.html":{}}}],["enumerations",{"_index":258,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error(errors.edge_exits",{"_index":71,"title":{},"body":{"classes/Graph.html":{}}}],["error(errors.edges_empty",{"_index":79,"title":{},"body":{"classes/Graph.html":{}}}],["error(errors.invalid_node_position",{"_index":142,"title":{},"body":{"classes/LinkedList.html":{}}}],["error(errors.linked_list_empty",{"_index":127,"title":{},"body":{"classes/LinkedList.html":{}}}],["error(errors.queue_empty",{"_index":188,"title":{},"body":{"classes/Queue.html":{}}}],["error(errors.stack_empty",{"_index":205,"title":{},"body":{"classes/Stack.html":{}}}],["errors",{"_index":56,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"miscellaneous/enumerations.html":{}}}],["errors.enum",{"_index":57,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{}}}],["exists",{"_index":275,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["export",{"_index":58,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"coverage.html":{}}}],["function",{"_index":244,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":288,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":304,"title":{},"body":{"index.html":{}}}],["getedges",{"_index":13,"title":{},"body":{"classes/Graph.html":{}}}],["getedges(vertex",{"_index":41,"title":{},"body":{"classes/Graph.html":{}}}],["getisempty",{"_index":181,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["getnode",{"_index":92,"title":{},"body":{"classes/LinkedList.html":{},"classes/Tree.html":{}}}],["getnode(nodeid",{"_index":218,"title":{},"body":{"classes/Tree.html":{}}}],["getnode(value",{"_index":104,"title":{},"body":{"classes/LinkedList.html":{}}}],["getsize",{"_index":184,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["getting",{"_index":290,"title":{"index.html":{}},"body":{}}],["given",{"_index":113,"title":{},"body":{"classes/LinkedList.html":{}}}],["graph",{"_index":1,"title":{"classes/Graph.html":{}},"body":{"classes/Graph.html":{},"coverage.html":{},"index.html":{}}}],["having",{"_index":106,"title":{},"body":{"classes/LinkedList.html":{}}}],["head",{"_index":88,"title":{},"body":{"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{}}}],["id",{"_index":155,"title":{},"body":{"classes/Node.html":{},"classes/Vertex.html":{}}}],["identifier",{"_index":238,"title":{},"body":{"coverage.html":{}}}],["identifying",{"_index":44,"title":{},"body":{"classes/Graph.html":{}}}],["implemented",{"_index":296,"title":{},"body":{"index.html":{}}}],["import",{"_index":55,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["indicate",{"_index":131,"title":{},"body":{"classes/LinkedList.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}}}],["insert",{"_index":112,"title":{},"body":{"classes/LinkedList.html":{}}}],["inserted",{"_index":129,"title":{},"body":{"classes/LinkedList.html":{}}}],["insertnode",{"_index":93,"title":{},"body":{"classes/LinkedList.html":{}}}],["insertnode(value",{"_index":108,"title":{},"body":{"classes/LinkedList.html":{}}}],["invalid_node_position",{"_index":266,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["isempty",{"_index":172,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["isolated",{"_index":278,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["item",{"_index":179,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["key",{"_index":64,"title":{},"body":{"classes/Graph.html":{}}}],["labeled",{"_index":285,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["leaf",{"_index":279,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["length",{"_index":89,"title":{},"body":{"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{}}}],["library",{"_index":295,"title":{},"body":{"index.html":{}}}],["license",{"_index":312,"title":{},"body":{"properties.html":{}}}],["linked",{"_index":114,"title":{},"body":{"classes/LinkedList.html":{},"miscellaneous/enumerations.html":{}}}],["linked_list_empty",{"_index":265,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["linkedlist",{"_index":84,"title":{"classes/LinkedList.html":{}},"body":{"classes/LinkedList.html":{},"coverage.html":{},"index.html":{}}}],["linkedlistnode",{"_index":96,"title":{"classes/LinkedListNode.html":{}},"body":{"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"coverage.html":{}}}],["linkedlistnode(value",{"_index":119,"title":{},"body":{"classes/LinkedList.html":{}}}],["list",{"_index":103,"title":{},"body":{"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["list.ts",{"_index":87,"title":{},"body":{"classes/LinkedList.html":{},"coverage.html":{}}}],["list.ts:20",{"_index":102,"title":{},"body":{"classes/LinkedList.html":{}}}],["list.ts:39",{"_index":105,"title":{},"body":{"classes/LinkedList.html":{}}}],["list.ts:6",{"_index":97,"title":{},"body":{"classes/LinkedList.html":{}}}],["list.ts:7",{"_index":99,"title":{},"body":{"classes/LinkedList.html":{}}}],["list.ts:71",{"_index":111,"title":{},"body":{"classes/LinkedList.html":{}}}],["list.ts:8",{"_index":95,"title":{},"body":{"classes/LinkedList.html":{}}}],["list/linked",{"_index":86,"title":{},"body":{"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"coverage.html":{}}}],["list/node",{"_index":276,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["madhur",{"_index":315,"title":{},"body":{"properties.html":{}}}],["map",{"_index":20,"title":{},"body":{"classes/Graph.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}}}],["matching",{"_index":83,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["methods",{"_index":10,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{}}}],["miscellaneous",{"_index":257,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":313,"title":{},"body":{"properties.html":{}}}],["mode",{"_index":303,"title":{},"body":{"index.html":{}}}],["modules",{"_index":307,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["name",{"_index":30,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}}}],["new",{"_index":19,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"coverage.html":{}}}],["newly",{"_index":132,"title":{},"body":{"classes/LinkedList.html":{}}}],["next",{"_index":144,"title":{},"body":{"classes/LinkedListNode.html":{}}}],["node",{"_index":40,"title":{"classes/Node.html":{}},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Node.html":{},"classes/Tree.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["node.next",{"_index":141,"title":{},"body":{"classes/LinkedList.html":{}}}],["node.prev",{"_index":121,"title":{},"body":{"classes/LinkedList.html":{}}}],["node.ts",{"_index":143,"title":{},"body":{"classes/LinkedListNode.html":{},"coverage.html":{}}}],["node.ts:2",{"_index":149,"title":{},"body":{"classes/LinkedListNode.html":{}}}],["node.ts:3",{"_index":148,"title":{},"body":{"classes/LinkedListNode.html":{}}}],["node.ts:4",{"_index":147,"title":{},"body":{"classes/LinkedListNode.html":{}}}],["nodeid",{"_index":220,"title":{},"body":{"classes/Tree.html":{}}}],["nodeposition",{"_index":110,"title":{},"body":{"classes/LinkedList.html":{},"miscellaneous/enumerations.html":{}}}],["nodeposition.after",{"_index":140,"title":{},"body":{"classes/LinkedList.html":{}}}],["nodeposition.before",{"_index":137,"title":{},"body":{"classes/LinkedList.html":{}}}],["nodes",{"_index":213,"title":{},"body":{"classes/Tree.html":{}}}],["nodetobeinserted",{"_index":134,"title":{},"body":{"classes/LinkedList.html":{}}}],["nodetobeinserted.next",{"_index":139,"title":{},"body":{"classes/LinkedList.html":{}}}],["nodetobeinserted.prev",{"_index":138,"title":{},"body":{"classes/LinkedList.html":{}}}],["npm",{"_index":300,"title":{},"body":{"index.html":{}}}],["null",{"_index":116,"title":{},"body":{"classes/LinkedList.html":{},"classes/LinkedListNode.html":{}}}],["number",{"_index":98,"title":{},"body":{"classes/LinkedList.html":{},"classes/Node.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}}}],["optional",{"_index":32,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}}}],["overview",{"_index":308,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":254,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":59,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{}}}],["parameters",{"_index":29,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}}}],["participant",{"_index":62,"title":{},"body":{"classes/Graph.html":{}}}],["peek",{"_index":170,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["please",{"_index":267,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pop",{"_index":196,"title":{},"body":{"classes/Stack.html":{}}}],["position",{"_index":109,"title":{},"body":{"classes/LinkedList.html":{},"miscellaneous/enumerations.html":{}}}],["position.ts",{"_index":261,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["prev",{"_index":145,"title":{},"body":{"classes/LinkedListNode.html":{}}}],["private",{"_index":226,"title":{},"body":{"classes/Vertex.html":{}}}],["project",{"_index":299,"title":{},"body":{"index.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"properties.html":{}}}],["provide",{"_index":268,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["push",{"_index":197,"title":{},"body":{"classes/Stack.html":{}}}],["push(item",{"_index":201,"title":{},"body":{"classes/Stack.html":{}}}],["queue",{"_index":165,"title":{"classes/Queue.html":{}},"body":{"classes/Queue.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["queue_empty",{"_index":271,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["reference",{"_index":61,"title":{},"body":{"classes/Graph.html":{}}}],["remove",{"_index":50,"title":{},"body":{"classes/Graph.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"miscellaneous/enumerations.html":{}}}],["removeedge",{"_index":14,"title":{},"body":{"classes/Graph.html":{}}}],["removeedge(source",{"_index":48,"title":{},"body":{"classes/Graph.html":{}}}],["removenode",{"_index":214,"title":{},"body":{"classes/Tree.html":{}}}],["removenode(node",{"_index":126,"title":{},"body":{"classes/LinkedList.html":{},"classes/Tree.html":{}}}],["removes",{"_index":125,"title":{},"body":{"classes/LinkedList.html":{}}}],["removevertex",{"_index":15,"title":{},"body":{"classes/Graph.html":{}}}],["removevertex(vertex",{"_index":53,"title":{},"body":{"classes/Graph.html":{}}}],["requested",{"_index":46,"title":{},"body":{"classes/Graph.html":{}}}],["results",{"_index":82,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":74,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{}}}],["returns",{"_index":36,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{}}}],["right",{"_index":162,"title":{},"body":{"classes/Node.html":{}}}],["run",{"_index":301,"title":{},"body":{"index.html":{}}}],["simplical",{"_index":282,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["simplicial",{"_index":281,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sink",{"_index":280,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["size",{"_index":173,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"miscellaneous/enumerations.html":{}}}],["source.edges.delete(destination.id",{"_index":80,"title":{},"body":{"classes/Graph.html":{}}}],["source.edges.has(destination.id",{"_index":68,"title":{},"body":{"classes/Graph.html":{}}}],["source.edges.set(destination.id",{"_index":72,"title":{},"body":{"classes/Graph.html":{}}}],["source.edges.size",{"_index":76,"title":{},"body":{"classes/Graph.html":{}}}],["src/.../errors.enum.ts",{"_index":259,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../index.ts",{"_index":289,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../node",{"_index":260,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../vertex",{"_index":262,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/errors.enum.ts",{"_index":264,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/graph/graph.ts",{"_index":6,"title":{},"body":{"classes/Graph.html":{},"coverage.html":{}}}],["src/graph/graph.ts:11",{"_index":39,"title":{},"body":{"classes/Graph.html":{}}}],["src/graph/graph.ts:20",{"_index":54,"title":{},"body":{"classes/Graph.html":{}}}],["src/graph/graph.ts:35",{"_index":26,"title":{},"body":{"classes/Graph.html":{}}}],["src/graph/graph.ts:49",{"_index":42,"title":{},"body":{"classes/Graph.html":{}}}],["src/graph/graph.ts:5",{"_index":22,"title":{},"body":{"classes/Graph.html":{}}}],["src/graph/graph.ts:58",{"_index":49,"title":{},"body":{"classes/Graph.html":{}}}],["src/graph/vertex",{"_index":277,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/graph/vertex.ts",{"_index":225,"title":{},"body":{"classes/Vertex.html":{},"coverage.html":{}}}],["src/graph/vertex.ts:5",{"_index":231,"title":{},"body":{"classes/Vertex.html":{}}}],["src/graph/vertex.ts:6",{"_index":229,"title":{},"body":{"classes/Vertex.html":{}}}],["src/graph/vertex.ts:7",{"_index":232,"title":{},"body":{"classes/Vertex.html":{}}}],["src/graph/vertex.ts:8",{"_index":228,"title":{},"body":{"classes/Vertex.html":{}}}],["src/index.ts",{"_index":243,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/linked",{"_index":85,"title":{},"body":{"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/queue/queue.ts",{"_index":166,"title":{},"body":{"classes/Queue.html":{},"coverage.html":{}}}],["src/queue/queue.ts:10",{"_index":178,"title":{},"body":{"classes/Queue.html":{}}}],["src/queue/queue.ts:18",{"_index":175,"title":{},"body":{"classes/Queue.html":{}}}],["src/queue/queue.ts:29",{"_index":180,"title":{},"body":{"classes/Queue.html":{}}}],["src/queue/queue.ts:4",{"_index":174,"title":{},"body":{"classes/Queue.html":{}}}],["src/queue/queue.ts:40",{"_index":182,"title":{},"body":{"classes/Queue.html":{}}}],["src/queue/queue.ts:48",{"_index":185,"title":{},"body":{"classes/Queue.html":{}}}],["src/stack/stack.ts",{"_index":195,"title":{},"body":{"classes/Stack.html":{},"coverage.html":{}}}],["src/stack/stack.ts:17",{"_index":200,"title":{},"body":{"classes/Stack.html":{}}}],["src/stack/stack.ts:3",{"_index":198,"title":{},"body":{"classes/Stack.html":{}}}],["src/stack/stack.ts:30",{"_index":199,"title":{},"body":{"classes/Stack.html":{}}}],["src/stack/stack.ts:41",{"_index":203,"title":{},"body":{"classes/Stack.html":{}}}],["src/stack/stack.ts:49",{"_index":204,"title":{},"body":{"classes/Stack.html":{}}}],["src/stack/stack.ts:9",{"_index":202,"title":{},"body":{"classes/Stack.html":{}}}],["src/tree/node.ts",{"_index":153,"title":{},"body":{"classes/Node.html":{},"coverage.html":{}}}],["src/tree/node.ts:4",{"_index":157,"title":{},"body":{"classes/Node.html":{}}}],["src/tree/node.ts:5",{"_index":158,"title":{},"body":{"classes/Node.html":{}}}],["src/tree/node.ts:6",{"_index":156,"title":{},"body":{"classes/Node.html":{}}}],["src/tree/tree.ts",{"_index":212,"title":{},"body":{"classes/Tree.html":{},"coverage.html":{}}}],["src/tree/tree.ts:10",{"_index":217,"title":{},"body":{"classes/Tree.html":{}}}],["src/tree/tree.ts:18",{"_index":221,"title":{},"body":{"classes/Tree.html":{}}}],["src/tree/tree.ts:26",{"_index":219,"title":{},"body":{"classes/Tree.html":{}}}],["src/tree/tree.ts:4",{"_index":215,"title":{},"body":{"classes/Tree.html":{}}}],["stack",{"_index":194,"title":{"classes/Stack.html":{}},"body":{"classes/Stack.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["stack_empty",{"_index":270,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["started",{"_index":291,"title":{"index.html":{}},"body":{}}],["starting",{"_index":34,"title":{},"body":{"classes/Graph.html":{}}}],["statements",{"_index":239,"title":{},"body":{"coverage.html":{}}}],["store",{"_index":167,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["structures",{"_index":293,"title":{},"body":{"index.html":{},"properties.html":{}}}],["switch",{"_index":135,"title":{},"body":{"classes/LinkedList.html":{}}}],["t",{"_index":101,"title":{},"body":{"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Vertex.html":{}}}],["table",{"_index":253,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":252,"title":{},"body":{"coverage.html":{}}}],["tail",{"_index":90,"title":{},"body":{"classes/LinkedList.html":{}}}],["test",{"_index":298,"title":{},"body":{"index.html":{}}}],["this.branchnodes",{"_index":164,"title":{},"body":{"classes/Node.html":{}}}],["this.head",{"_index":115,"title":{},"body":{"classes/LinkedList.html":{}}}],["this.head.next",{"_index":128,"title":{},"body":{"classes/LinkedList.html":{}}}],["this.id",{"_index":163,"title":{},"body":{"classes/Node.html":{},"classes/Vertex.html":{}}}],["this.isempty",{"_index":187,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["this.length",{"_index":118,"title":{},"body":{"classes/LinkedList.html":{}}}],["this.next",{"_index":151,"title":{},"body":{"classes/LinkedListNode.html":{}}}],["this.nodes.delete(node.id",{"_index":223,"title":{},"body":{"classes/Tree.html":{}}}],["this.nodes.get(nodeid",{"_index":224,"title":{},"body":{"classes/Tree.html":{}}}],["this.nodes.set(node.id",{"_index":222,"title":{},"body":{"classes/Tree.html":{}}}],["this.peek",{"_index":207,"title":{},"body":{"classes/Stack.html":{}}}],["this.prev",{"_index":152,"title":{},"body":{"classes/LinkedListNode.html":{}}}],["this.size",{"_index":192,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["this.store.length",{"_index":193,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["this.store.push(item",{"_index":186,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["this.store.shift",{"_index":189,"title":{},"body":{"classes/Queue.html":{}}}],["this.store.splice(this.size",{"_index":208,"title":{},"body":{"classes/Stack.html":{}}}],["this.store[0",{"_index":190,"title":{},"body":{"classes/Queue.html":{}}}],["this.store[this.size",{"_index":210,"title":{},"body":{"classes/Stack.html":{}}}],["this.tail",{"_index":117,"title":{},"body":{"classes/LinkedList.html":{}}}],["this.tail.next",{"_index":120,"title":{},"body":{"classes/LinkedList.html":{}}}],["this.types",{"_index":234,"title":{},"body":{"classes/Vertex.html":{}}}],["this.value",{"_index":150,"title":{},"body":{"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Vertex.html":{}}}],["this.vertices.delete(vertex.id",{"_index":67,"title":{},"body":{"classes/Graph.html":{}}}],["this.vertices.set(vertex.id",{"_index":60,"title":{},"body":{"classes/Graph.html":{}}}],["throw",{"_index":70,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{}}}],["topitem",{"_index":206,"title":{},"body":{"classes/Stack.html":{}}}],["tree",{"_index":211,"title":{"classes/Tree.html":{}},"body":{"classes/Tree.html":{},"coverage.html":{}}}],["treeto",{"_index":297,"title":{},"body":{"index.html":{}}}],["two",{"_index":52,"title":{},"body":{"classes/Graph.html":{}}}],["type",{"_index":31,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"coverage.html":{}}}],["type.enum",{"_index":233,"title":{},"body":{"classes/Vertex.html":{}}}],["type.enum.ts",{"_index":263,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["types",{"_index":227,"title":{},"body":{"classes/Vertex.html":{}}}],["typescript",{"_index":294,"title":{},"body":{"index.html":{},"properties.html":{}}}],["universal",{"_index":283,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unlabeled",{"_index":286,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unlabled",{"_index":287,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["uuid",{"_index":161,"title":{},"body":{"classes/Node.html":{},"classes/Vertex.html":{},"dependencies.html":{}}}],["uuidv4",{"_index":160,"title":{},"body":{"classes/Node.html":{},"classes/Vertex.html":{}}}],["v4",{"_index":159,"title":{},"body":{"classes/Node.html":{},"classes/Vertex.html":{}}}],["valid",{"_index":269,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["value",{"_index":17,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"miscellaneous/enumerations.html":{}}}],["value.edges.delete(vertex.id",{"_index":66,"title":{},"body":{"classes/Graph.html":{}}}],["version",{"_index":310,"title":{},"body":{"properties.html":{}}}],["vertex",{"_index":24,"title":{"classes/Vertex.html":{}},"body":{"classes/Graph.html":{},"classes/Vertex.html":{},"coverage.html":{}}}],["vertex.edges",{"_index":75,"title":{},"body":{"classes/Graph.html":{}}}],["vertextype",{"_index":230,"title":{},"body":{"classes/Vertex.html":{},"miscellaneous/enumerations.html":{}}}],["vertextype.labeled",{"_index":235,"title":{},"body":{"classes/Vertex.html":{}}}],["vertices",{"_index":9,"title":{},"body":{"classes/Graph.html":{}}}],["void",{"_index":37,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{}}}],["watch",{"_index":302,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Graph.html":{"url":"classes/Graph.html","title":"class - Graph","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Graph\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/graph/graph.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                vertices\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addEdge\n                            \n                            \n                                addVertex\n                            \n                            \n                                getEdges\n                            \n                            \n                                removeEdge\n                            \n                            \n                                removeVertex\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        vertices\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/graph/graph.ts:5\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addEdge\n                        \n                    \n                \n            \n            \n                \naddEdge(source: Vertex, destination: Vertex)\n                \n            \n\n\n            \n                \n                    Defined in src/graph/graph.ts:35\n                \n            \n\n\n            \n                \n                    To Add edge in the graph\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    source\n                                    \n                                                Vertex\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        starting of the edge\n\n                                    \n                                \n                                \n                                    destination\n                                    \n                                                Vertex\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ending of the edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addVertex\n                        \n                    \n                \n            \n            \n                \naddVertex(vertex: Vertex)\n                \n            \n\n\n            \n                \n                    Defined in src/graph/graph.ts:11\n                \n            \n\n\n            \n                \n                    To add node in the graph\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    vertex\n                                    \n                                                Vertex\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdges\n                        \n                    \n                \n            \n            \n                \ngetEdges(vertex: Vertex)\n                \n            \n\n\n            \n                \n                    Defined in src/graph/graph.ts:49\n                \n            \n\n\n            \n                \n                    To get the associated vertices identifying the edges of a vertex\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    vertex\n                                    \n                                                Vertex\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        vertex for which the edges have been requested.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        array of vertices\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeEdge\n                        \n                    \n                \n            \n            \n                \nremoveEdge(source: Vertex, destination: Vertex)\n                \n            \n\n\n            \n                \n                    Defined in src/graph/graph.ts:58\n                \n            \n\n\n            \n                \n                    To remove the edge comprised of two vertices\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    source\n                                    \n                                                Vertex\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        starting of the edge\n\n                                    \n                                \n                                \n                                    destination\n                                    \n                                                Vertex\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ending of the edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeVertex\n                        \n                    \n                \n            \n            \n                \nremoveVertex(vertex: Vertex)\n                \n            \n\n\n            \n                \n                    Defined in src/graph/graph.ts:20\n                \n            \n\n\n            \n                \n                    To remove a node from graph\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    vertex\n                                    \n                                                Vertex\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Errors } from '../errors.enum';\nimport Vertex from './vertex';\n\nexport default class Graph {\n  vertices = new Map();\n\n  /**\n   * To add node in the graph\n   * @param vertex\n   */\n  addVertex(vertex: Vertex) {\n    this.vertices.set(vertex.id, vertex);\n  }\n\n  /**\n   * To remove a node from graph\n   * @param source\n   * @returns\n   */\n  removeVertex(vertex: Vertex) {\n    // Remove the reference of vertex from all the edges where it was a participant\n    for (const [key, value] of Array.from(vertex.edges)) {\n      value.edges.delete(vertex.id);\n    }\n\n    this.vertices.delete(vertex.id);\n  }\n\n  /**\n   * To Add edge in the graph\n   * @param source starting of the edge\n   * @param destination ending of the edge\n   * @returns\n   */\n  addEdge(source: Vertex, destination: Vertex) {\n    if (source.edges.has(destination.id) && destination.edges.has(source.id)) {\n      throw new Error(Errors.EDGE_EXITS);\n    }\n\n    source.edges.set(destination.id, destination);\n    destination.edges.set(source.id, source);\n  }\n\n  /**\n   * To get the associated vertices identifying the edges of a vertex\n   * @param vertex vertex for which the edges have been requested.\n   * @returns array of vertices\n   */\n  getEdges(vertex: Vertex) {\n    return vertex.edges;\n  }\n\n  /**\n   * To remove the edge comprised of two vertices\n   * @param source starting of the edge\n   * @param destination ending of the edge\n   */\n  removeEdge(source: Vertex, destination: Vertex) {\n    if (source.edges.size === 0 || destination.edges.size === 0) {\n      throw new Error(Errors.EDGES_EMPTY);\n    }\n\n    source.edges.delete(destination.id);\n    destination.edges.delete(source.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LinkedList.html":{"url":"classes/LinkedList.html","title":"class - LinkedList","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LinkedList\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/linked-list/linked-list.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                head\n                            \n                            \n                                length\n                            \n                            \n                                tail\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addNode\n                            \n                            \n                                getNode\n                            \n                            \n                                insertNode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/linked-list/linked-list.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        head\n                        \n                    \n                \n            \n                \n                    \n                        Type :     LinkedListNode\n\n                    \n                \n                    \n                        \n                                Defined in src/linked-list/linked-list.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/linked-list/linked-list.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tail\n                        \n                    \n                \n            \n                \n                    \n                        Type :     LinkedListNode\n\n                    \n                \n                    \n                        \n                                Defined in src/linked-list/linked-list.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addNode\n                        \n                    \n                \n            \n            \n                \naddNode(value: T)\n                \n            \n\n\n            \n                \n                    Defined in src/linked-list/linked-list.ts:20\n                \n            \n\n\n            \n                \n                    To add a new node to the list at the tail.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNode\n                        \n                    \n                \n            \n            \n                \ngetNode(value: T)\n                \n            \n\n\n            \n                \n                    Defined in src/linked-list/linked-list.ts:39\n                \n            \n\n\n            \n                \n                    Get the node having a certain value\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     LinkedListNode\n\n                    \n                    \n                        LinkedListNode\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insertNode\n                        \n                    \n                \n            \n            \n                \ninsertNode(value: T, node: LinkedListNode, position: NodePosition)\n                \n            \n\n\n            \n                \n                    Defined in src/linked-list/linked-list.ts:71\n                \n            \n\n\n            \n                \n                    To insert a node at a given position in the linked list.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    node\n                                    \n                                            LinkedListNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    position\n                                    \n                                                NodePosition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Errors } from '../errors.enum';\nimport LinkedListNode from './linked-list-node';\nimport { NodePosition } from './node-position';\n\nexport default class LinkedList {\n    head: LinkedListNode;\n    tail: LinkedListNode;\n    length: number;\n\n    constructor() {\n        this.head = null;\n        this.tail = null;\n        this.length = 0;\n    }\n\n    /**\n     * To add a new node to the list at the tail.\n     * @param value\n     */\n    addNode(value: T): void {\n        const node = new LinkedListNode(value);\n\n        if (this.length === 0) {\n            this.head = node;\n            this.tail = node;\n        } else {\n            this.tail.next = node;\n            node.prev = this.tail;\n            this.tail = node;\n        }\n        this.length++;\n    }\n\n    /**\n     * Get the node having a certain value\n     * @param value\n     * @returns LinkedListNode\n     */\n    getNode(value: T): LinkedListNode {\n        let current = this.head;\n\n        while (current) {\n            if (current.value === value) {\n                return current;\n            }\n            current = current.next;\n        }\n    }\n\n    /**\n     * Removes a node from the list\n     * @param node\n     * @returns\n     */\n    // removeNode(node: LinkedListNode): void {\n    //   if (this.length === 0) {\n    //     throw new Error(Errors.LINKED_LIST_EMPTY);\n    //   }\n\n    //   if (this.head === node) {\n    //     this.head === this.head.next;\n    //   }\n    // }\n\n    /**\n     * To insert a node at a given position in the linked list.\n     * @param value Value of the node to be inserted\n     * @param node The node before or after which the new node is inserted\n     * @param position To indicate the position of the newly added node - BEFORE, AFTER\n     */\n    insertNode(value: T, node: LinkedListNode, position: NodePosition) {\n        if (this.length === 0) {\n            throw new Error(Errors.LINKED_LIST_EMPTY);\n        }\n        const nodeToBeInserted = new LinkedListNode(value);\n\n        switch (position) {\n            case NodePosition.BEFORE:\n                nodeToBeInserted.prev = node.prev;\n                nodeToBeInserted.next = node;\n                node.prev = nodeToBeInserted;\n                this.length++;\n                return nodeToBeInserted;\n\n            case NodePosition.AFTER:\n                nodeToBeInserted.next = node.next;\n                nodeToBeInserted.prev = node;\n                node.next = nodeToBeInserted;\n                this.length++;\n                return nodeToBeInserted;\n\n            default:\n                throw new Error(Errors.INVALID_NODE_POSITION);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LinkedListNode.html":{"url":"classes/LinkedListNode.html","title":"class - LinkedListNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LinkedListNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/linked-list/linked-list-node.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                next\n                            \n                            \n                                prev\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value: T, next: LinkedListNode, prev: LinkedListNode)\n                    \n                \n                        \n                            \n                                Defined in src/linked-list/linked-list-node.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        next\n                                                  \n                                                        \n                                                                    LinkedListNode\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prev\n                                                  \n                                                        \n                                                                    LinkedListNode\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        next\n                        \n                    \n                \n            \n                \n                    \n                        Type :     LinkedListNode | null\n\n                    \n                \n                    \n                        \n                                Defined in src/linked-list/linked-list-node.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prev\n                        \n                    \n                \n            \n                \n                    \n                        Type :     LinkedListNode | null\n\n                    \n                \n                    \n                        \n                                Defined in src/linked-list/linked-list-node.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T\n\n                    \n                \n                    \n                        \n                                Defined in src/linked-list/linked-list-node.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export default class LinkedListNode {\n    value: T;\n    next: LinkedListNode | null;\n    prev: LinkedListNode | null;\n\n    constructor(\n        value: T,\n        next: LinkedListNode = null,\n        prev: LinkedListNode = null\n    ) {\n        this.value = value;\n        this.next = next;\n        this.prev = prev;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Node.html":{"url":"classes/Node.html","title":"class - Node","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Node\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tree/node.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                branchNodes\n                            \n                            \n                                id\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value: T, branchNodes: Node[])\n                    \n                \n                        \n                            \n                                Defined in src/tree/node.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        branchNodes\n                                                  \n                                                        \n                                                                        Node[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        branchNodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Node[]\n\n                    \n                \n                    \n                        \n                                Defined in src/tree/node.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/tree/node.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T\n\n                    \n                \n                    \n                        \n                                Defined in src/tree/node.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { v4 as uuidv4 } from 'uuid';\n\nexport default class Node {\n    id: number;\n    value: T;\n    branchNodes: Node[];\n    //right: Node[];\n\n    constructor(value: T, branchNodes: Node[]) {\n        this.id = uuidv4();\n        this.value = value;\n        this.branchNodes = branchNodes;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Queue.html":{"url":"classes/Queue.html","title":"class - Queue","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Queue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/queue/queue.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                store\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                dequeue\n                            \n                            \n                                enqueue\n                            \n                            \n                                peek\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isEmpty\n                                \n                                \n                                    size\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/queue/queue.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        dequeue\n                        \n                    \n                \n            \n            \n                \ndequeue()\n                \n            \n\n\n            \n                \n                    Defined in src/queue/queue.ts:18\n                \n            \n\n\n            \n                \n                    To get the head element of the queue and remove the head\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        T\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enqueue\n                        \n                    \n                \n            \n            \n                \nenqueue(item: T)\n                \n            \n\n\n            \n                \n                    Defined in src/queue/queue.ts:10\n                \n            \n\n\n            \n                \n                    To add item to the queue\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        peek\n                        \n                    \n                \n            \n            \n                \npeek()\n                \n            \n\n\n            \n                \n                    Defined in src/queue/queue.ts:29\n                \n            \n\n\n            \n                \n                    Get head element of the queue\n\n\n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        T\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isEmpty\n                    \n                \n\n                \n                    \n                        getisEmpty()\n                    \n                \n                            \n                                \n                                    Defined in src/queue/queue.ts:40\n                                \n                            \n                    \n                        \n                                Get if the queue is empty or not\n\n\n                                \n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        size\n                    \n                \n\n                \n                    \n                        getsize()\n                    \n                \n                            \n                                \n                                    Defined in src/queue/queue.ts:48\n                                \n                            \n                    \n                        \n                                Get the size of queue\n\n\n                                \n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Errors } from '../errors.enum';\n\nexport default class Queue {\n    store: T[] = [];\n\n    /**\n     * To add item to the queue\n     * @param item\n     */\n    enqueue(item: T) {\n        this.store.push(item);\n    }\n\n    /**\n     * To get the head element of the queue and remove the head\n     * @returns T\n     */\n    dequeue() {\n        if (this.isEmpty) {\n            throw new Error(Errors.QUEUE_EMPTY);\n        }\n        return this.store.shift();\n    }\n\n    /**\n     * Get head element of the queue\n     * @returns T\n     */\n    peek(): T {\n        if (this.isEmpty) {\n            throw new Error(Errors.QUEUE_EMPTY);\n        }\n        return this.store[0];\n    }\n\n    /**\n     * Get if the queue is empty or not\n     * @returns bool\n     */\n    get isEmpty() {\n        return this.size === 0;\n    }\n\n    /**\n     * Get the size of queue\n     * @returns length\n     */\n    get size() {\n        return this.store.length;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Stack.html":{"url":"classes/Stack.html","title":"class - Stack","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Stack\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stack/stack.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                store\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                peek\n                            \n                            \n                                pop\n                            \n                            \n                                push\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isEmpty\n                                \n                                \n                                    size\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/stack/stack.ts:3\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        peek\n                        \n                    \n                \n            \n            \n                \npeek()\n                \n            \n\n\n            \n                \n                    Defined in src/stack/stack.ts:30\n                \n            \n\n\n            \n                \n                    Get head element of the stack\n\n\n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        T\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pop\n                        \n                    \n                \n            \n            \n                \npop()\n                \n            \n\n\n            \n                \n                    Defined in src/stack/stack.ts:17\n                \n            \n\n\n            \n                \n                    To get the head element of the stack and remove the head\n\n\n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        T\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        push\n                        \n                    \n                \n            \n            \n                \npush(item: T)\n                \n            \n\n\n            \n                \n                    Defined in src/stack/stack.ts:9\n                \n            \n\n\n            \n                \n                    To add item to the stack\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isEmpty\n                    \n                \n\n                \n                    \n                        getisEmpty()\n                    \n                \n                            \n                                \n                                    Defined in src/stack/stack.ts:41\n                                \n                            \n                    \n                        \n                                Get if the stack is empty or not\n\n\n                                \n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        size\n                    \n                \n\n                \n                    \n                        getsize()\n                    \n                \n                            \n                                \n                                    Defined in src/stack/stack.ts:49\n                                \n                            \n                    \n                        \n                                Get the size of stack\n\n\n                                \n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Errors } from '../errors.enum';\nexport default class Stack {\n    store: T[] = [];\n\n    /**\n     * To add item to the stack\n     * @param item\n     */\n    push(item: T) {\n        this.store.push(item);\n    }\n\n    /**\n     * To get the head element of the stack and remove the head\n     * @returns T\n     */\n    pop(): T {\n        if (this.isEmpty) {\n            throw new Error(Errors.STACK_EMPTY);\n        }\n        const topItem = this.peek();\n        this.store.splice(this.size - 1);\n        return topItem;\n    }\n\n    /**\n     * Get head element of the stack\n     * @returns T\n     */\n    peek(): T {\n        if (this.isEmpty) {\n            throw new Error(Errors.STACK_EMPTY);\n        }\n        return this.store[this.size - 1];\n    }\n\n    /**\n     * Get if the stack is empty or not\n     * @returns bool\n     */\n    get isEmpty() {\n        return this.size === 0;\n    }\n\n    /**\n     * Get the size of stack\n     * @returns length\n     */\n    get size() {\n        return this.store.length;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tree.html":{"url":"classes/Tree.html","title":"class - Tree","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tree\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tree/tree.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                nodes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addNode\n                            \n                            \n                                getNode\n                            \n                            \n                                removeNode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        nodes\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/tree/tree.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addNode\n                        \n                    \n                \n            \n            \n                \naddNode(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in src/tree/tree.ts:10\n                \n            \n\n\n            \n                \n                    To add a node in the tree\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNode\n                        \n                    \n                \n            \n            \n                \ngetNode(nodeId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/tree/tree.ts:26\n                \n            \n\n\n            \n                \n                    To get a node from the tree\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodeId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeNode\n                        \n                    \n                \n            \n            \n                \nremoveNode(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in src/tree/tree.ts:18\n                \n            \n\n\n            \n                \n                    To remove a node from the tree\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import Node from './node';\n\nexport default class Tree {\n    nodes = new Map();\n\n    /**\n     * To add a node in the tree\n     * @param node\n     */\n    addNode(node: Node) {\n        this.nodes.set(node.id, node);\n    }\n\n    /**\n     * To remove a node from the tree\n     * @param node\n     */\n    removeNode(node: Node) {\n        this.nodes.delete(node.id);\n    }\n\n    /**\n     * To get a node from the tree\n     * @param nodeId\n     */\n    getNode(nodeId: number) {\n        return this.nodes.get(nodeId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Vertex.html":{"url":"classes/Vertex.html","title":"class - Vertex","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Vertex\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/graph/vertex.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                edges\n                            \n                            \n                                id\n                            \n                            \n                                    Private\n                                types\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value: T)\n                    \n                \n                        \n                            \n                                Defined in src/graph/vertex.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        edges\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/graph/vertex.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/graph/vertex.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        types\n                        \n                    \n                \n            \n                \n                    \n                        Type :         VertexType[]\n\n                    \n                \n                    \n                        \n                                Defined in src/graph/vertex.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T\n\n                    \n                \n                    \n                        \n                                Defined in src/graph/vertex.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { VertexType } from './vertex-type.enum';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport default class Vertex {\n  private types: VertexType[];\n  id: number;\n  value: T;\n  edges?: Map> = new Map();\n\n  constructor(value: T) {\n    this.id = uuidv4();\n    this.value = value;\n    this.types = [VertexType.LABELED];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/graph/graph.ts\n            \n            class\n            Graph\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/graph/vertex.ts\n            \n            class\n            Vertex\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/index.ts\n            \n            function\n            doSomeStuff\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/linked-list/linked-list-node.ts\n            \n            class\n            LinkedListNode\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/linked-list/linked-list.ts\n            \n            class\n            LinkedList\n            \n                37 %\n                (3/8)\n            \n        \n        \n            \n                \n                src/queue/queue.ts\n            \n            class\n            Queue\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/stack/stack.ts\n            \n            class\n            Stack\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/tree/node.ts\n            \n            class\n            Node\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/tree/tree.ts\n            \n            class\n            Tree\n            \n                60 %\n                (3/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            uuid : ^8.3.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Errors   (src/.../errors.enum.ts)\n                        \n                        \n                            NodePosition   (src/.../node-position.ts)\n                        \n                        \n                            VertexType   (src/.../vertex-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/errors.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Errors\n                    \n                \n                        \n                            \n                                 LINKED_LIST_EMPTY\n                            \n                        \n                        \n                            \n                                Value : The linked list is empty\n                            \n                        \n                        \n                            \n                                 INVALID_NODE_POSITION\n                            \n                        \n                        \n                            \n                                Value : Please provide a valid node position\n                            \n                        \n                        \n                            \n                                 STACK_EMPTY\n                            \n                        \n                        \n                            \n                                Value : The stack is empty\n                            \n                        \n                        \n                            \n                                 QUEUE_EMPTY\n                            \n                        \n                        \n                            \n                                Value : The queue is empty\n                            \n                        \n                        \n                            \n                                 EDGES_EMPTY\n                            \n                        \n                        \n                            \n                                Value : There are no edges to remove\n                            \n                        \n                        \n                            \n                                 EDGE_EXITS\n                            \n                        \n                        \n                            \n                                Value : Edge already exists\n                            \n                        \n            \n        \n\n    src/linked-list/node-position.ts\n    \n        \n            \n                \n                    \n                        \n                        NodePosition\n                    \n                \n                        \n                            \n                                 BEFORE\n                            \n                        \n                        \n                            \n                                 AFTER\n                            \n                        \n            \n        \n\n    src/graph/vertex-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        VertexType\n                    \n                \n                        \n                            \n                                 ISOLATED\n                            \n                        \n                        \n                            \n                                Value : Isolated\n                            \n                        \n                        \n                            \n                                 LEAF\n                            \n                        \n                        \n                            \n                                Value : Leaf\n                            \n                        \n                        \n                            \n                                 SOURCE\n                            \n                        \n                        \n                            \n                                Value : Source\n                            \n                        \n                        \n                            \n                                 SINK\n                            \n                        \n                        \n                            \n                                Value : Sink\n                            \n                        \n                        \n                            \n                                 SIMPLICIAL\n                            \n                        \n                        \n                            \n                                Value : Simplical\n                            \n                        \n                        \n                            \n                                 UNIVERSAL\n                            \n                        \n                        \n                            \n                                Value : Universal\n                            \n                        \n                        \n                            \n                                 CUT\n                            \n                        \n                        \n                            \n                                Value : Cut\n                            \n                        \n                        \n                            \n                                 LABELED\n                            \n                        \n                        \n                            \n                                Value : Labeled\n                            \n                        \n                        \n                            \n                                 UNLABELED\n                            \n                        \n                        \n                            \n                                Value : Unlabled\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            doSomeStuff   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        doSomeStuff\n                        \n                    \n                \n            \n            \n                \ndoSomeStuff()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\nData Structures in Typescript\nLibrary of data structures implemented in Typescript.\nData structures implemented in this library\n\nGraph\nLinkedList\nQueue\nStack\nTreeTo test the project\n\nnpm run test - To test the library\ntest-watch - To test the library in watch mode\ntest-coverage - To generate the test coverage\nnpm run build - To build the library\nnpm run docs - To generate the docs\n\nLibrary documentation\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0\n        \n            Description : Data Structures in TypeScript\n        \n            License : MIT\n        \n            Author : Madhur Ahuja\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
