var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Graph.html",[0,0.03,1,1.407]],["body/classes/Graph.html",[0,0.017,1,2.177,2,0.342,3,0.407,4,0.92,5,0.342,6,1.127,7,0.23,8,0.447,9,4.093,10,1.047,11,2.252,12,2.252,13,2.252,14,2.252,15,2.252,16,0.643,17,0.54,18,0.063,19,1.068,20,1.466,21,1.046,22,1.427,23,2.252,24,2.706,25,4.093,26,1.427,27,1.473,28,3.432,29,0.985,30,0.985,31,0.827,32,0.985,33,2.203,34,3.168,35,3.168,36,1.849,37,1.473,38,2.252,39,1.427,40,1.068,41,2.252,42,1.427,43,2.252,44,2.252,45,2.245,46,2.252,47,2.252,48,2.252,49,1.427,50,1.603,51,2.252,52,2.252,53,2.252,54,1.427,55,0.759,56,0.663,57,0.781,58,0.407,59,1.784,60,1.427,61,1.427,62,1.427,63,0.929,64,1.427,65,1.427,66,1.427,67,1.427,68,1.427,69,1.427,70,1.233,71,1.427,72,1.427,73,1.427,74,0.663,75,1.427,76,1.427,77,1.047,78,1.427,79,1.427,80,1.427,81,1.427,82,0.028,83,0.028]],["title/classes/LinkedList.html",[0,0.03,84,1.407]],["body/classes/LinkedList.html",[0,0.014,2,0.299,3,0.356,4,0.299,5,0.299,7,0.201,8,0.401,10,0.94,16,0.577,17,0.964,18,0.063,19,1.276,21,1.038,27,0.94,29,0.728,30,0.728,31,0.827,32,0.728,36,1.499,37,1.185,40,1.598,55,0.86,56,0.58,57,0.683,58,0.356,59,1.605,63,1.316,70,1.396,74,1.185,77,1.363,82,0.025,83,0.025,84,1.107,85,2.073,86,2.465,87,0.985,88,1.66,89,1.66,90,3.224,91,1.596,92,1.596,93,2.022,94,1.396,95,2.022,96,2.335,97,1.247,98,1.107,99,1.247,100,2.022,101,1.55,102,1.247,103,1.89,104,2.022,105,1.247,106,2.022,107,2.022,108,2.022,109,3.09,110,2.316,111,1.247,112,2.022,113,2.022,114,2.014,115,3.224,116,1.596,117,2.933,118,3.636,119,2.022,120,1.247,121,2.55,122,2.933,123,1.247,124,1.247,125,1.247,126,0.985,127,2.022,128,1.247,129,2.022,130,1.596,131,1.247,132,1.247,133,1.247,134,3.224,135,1.247,136,2.022,137,1.247,138,2.022,139,2.022,140,1.247,141,2.022,142,1.247]],["title/classes/LinkedListNode.html",[0,0.03,96,1.407]],["body/classes/LinkedListNode.html",[0,0.028,2,0.581,3,0.692,4,0.581,5,0.581,7,0.39,8,0.662,16,0.692,17,1.066,18,0.062,21,1.172,29,0.692,30,0.692,31,0.984,32,0.692,58,0.692,82,0.041,83,0.041,85,2.356,86,2.802,94,1.825,96,2.657,101,1.705,103,2.356,116,3.512,143,1.913,144,4.557,145,4.557,146,1.577,147,3.334,148,2.423,149,2.423,150,1.577,151,2.423,152,2.423]],["title/classes/Node.html",[0,0.03,40,0.866]],["body/classes/Node.html",[0,0.031,2,0.643,3,0.766,4,0.643,5,0.643,7,0.432,8,0.709,16,0.766,17,1.069,18,0.062,21,1.222,29,0.766,30,0.766,31,1.026,32,0.766,40,1.602,55,0.905,58,0.766,82,0.044,83,0.044,94,1.469,98,1.956,101,1.765,146,2.326,150,1.747,153,2.119,154,4.679,155,3.171,156,3.572,157,2.684,158,2.684,159,2.119,160,2.821,161,1.747,162,2.119,163,2.119,164,2.684]],["title/classes/Queue.html",[0,0.03,165,1.195]],["body/classes/Queue.html",[0,0.022,2,0.459,3,0.546,4,0.459,5,0.459,7,0.308,8,0.559,10,1.31,16,0.804,17,0.459,18,0.063,19,0.95,21,1.174,27,1.31,29,0.546,30,0.546,31,0.675,32,0.546,36,1.977,37,0.889,50,1.31,55,0.645,56,0.889,57,1.047,58,0.546,59,0.889,70,1.542,74,1.715,77,0.889,82,0.035,83,0.035,88,2.678,89,1.246,101,1.819,165,2.16,166,1.511,167,2.64,168,3.689,169,2.817,170,2.913,171,2.225,172,2.64,173,3.105,174,1.913,175,1.913,176,2.913,177,2.817,178,1.913,179,2.913,180,1.913,181,1.511,182,1.913,183,1.834,184,1.511,185,1.913,186,1.511,187,2.225,188,2.817,189,1.913,190,1.913,191,1.511,192,1.511,193,1.511]],["title/classes/Stack.html",[0,0.03,194,1.195]],["body/classes/Stack.html",[0,0.022,2,0.447,3,0.533,4,0.447,5,0.447,7,0.3,8,0.549,10,1.285,16,0.79,17,0.447,18,0.063,19,0.932,21,1.164,27,1.285,29,0.533,30,0.533,31,0.663,32,0.533,36,1.961,37,0.867,50,1.285,55,0.629,56,0.867,57,1.021,58,0.533,59,0.867,63,1.214,70,1.514,74,1.694,77,0.867,82,0.034,83,0.034,88,2.653,89,1.214,101,1.85,167,2.602,170,2.877,171,2.183,172,2.602,173,3.072,176,2.877,179,2.877,181,1.473,183,1.8,184,1.473,186,1.473,187,2.183,191,1.473,192,1.473,193,1.473,194,2.149,195,1.473,196,3.644,197,2.765,198,1.866,199,1.866,200,1.866,201,2.765,202,1.866,203,1.866,204,1.866,205,2.765,206,2.765,207,1.866,208,1.866,209,2.765,210,1.866]],["title/classes/Tree.html",[0,0.03,211,1.673]],["body/classes/Tree.html",[0,0.026,2,0.536,3,0.639,4,0.536,5,0.536,7,0.36,8,0.626,10,1.466,16,0.9,17,0.536,18,0.063,19,1.063,20,2.053,21,1.132,27,1.466,29,1.043,30,1.043,31,0.875,32,1.043,36,1.698,37,1.466,40,1.678,50,1.466,55,0.754,58,0.639,59,1.698,74,1.04,82,0.039,83,0.039,91,2.49,92,2.49,98,2,126,2.49,211,2.963,212,1.767,213,3.652,214,3.154,215,2.238,216,3.154,217,2.238,218,3.154,219,2.238,220,3.154,221,2.238,222,2.238,223,2.238,224,2.238]],["title/classes/Vertex.html",[0,0.03,24,1.407]],["body/classes/Vertex.html",[0,0.029,2,0.596,3,0.71,4,0.596,5,0.596,7,0.4,8,0.673,16,0.969,17,1.074,18,0.062,19,1.143,20,2.701,21,1.24,24,2.114,29,0.71,30,0.71,31,1.041,32,1.103,45,2.514,55,1.143,58,0.71,82,0.042,83,0.042,94,1.361,98,1.857,101,1.72,146,2.208,150,1.618,155,3.049,159,1.962,160,2.679,161,1.618,163,1.962,225,1.962,226,3.862,227,3.862,228,3.392,229,2.485,230,3.049,231,2.485,232,2.485,233,2.485,234,2.485,235,2.485]],["title/coverage.html",[236,2.259]],["body/coverage.html",[0,0.056,1,1.55,5,0.678,6,2.235,18,0.061,19,0.954,24,1.55,31,0.678,40,0.954,77,2.032,82,0.045,83,0.045,84,1.55,85,2.026,86,2.409,87,2.235,96,1.55,103,1.55,143,2.235,153,2.235,165,1.316,166,2.235,194,1.316,195,2.235,211,1.842,212,2.235,225,2.235,236,1.842,237,2.235,238,2.83,239,2.83,240,2.83,241,2.83,242,2.83,243,2.235,244,2.83,245,2.235,246,2.83,247,3.7,248,2.83,249,2.83,250,4.122,251,4.122,252,2.83,253,2.83]],["title/dependencies.html",[254,1.709,255,2.432]],["body/dependencies.html",[18,0.058,82,0.055,83,0.055,161,2.521,255,3.057,256,3.872]],["title/miscellaneous/enumerations.html",[257,1.185,258,2.432]],["body/miscellaneous/enumerations.html",[4,0.832,7,0.414,17,1.194,18,0.062,28,2.03,40,0.867,45,1.674,50,1.195,56,1.613,82,0.043,83,0.043,85,1.407,103,1.407,109,2.03,110,2.741,114,2.03,130,2.03,165,1.195,183,2.558,194,1.195,230,2.741,257,1.407,258,2.03,259,2.571,260,2.571,261,3.471,262,2.571,263,3.471,264,2.571,265,2.571,266,2.571,267,2.571,268,2.571,269,2.571,270,2.571,271,2.571,272,2.571,273,2.571,274,2.571,275,2.571,276,2.571,277,2.571,278,3.471,279,3.471,280,3.471,281,2.571,282,2.571,283,3.471,284,3.471,285,3.471,286,2.571,287,2.571]],["title/miscellaneous/functions.html",[257,1.185,288,2.432]],["body/miscellaneous/functions.html",[7,0.609,18,0.054,82,0.054,83,0.054,243,2.989,245,3.709,257,2.072,288,2.989,289,3.785]],["title/index.html",[7,0.348,290,2.164,291,2.164]],["body/index.html",[1,1.596,18,0.054,82,0.046,83,0.046,84,1.596,162,2.303,165,1.355,194,1.355,236,2.456,237,2.979,292,3.772,293,2.916,294,2.916,295,2.916,296,2.916,297,3.302,298,3.302,299,2.979,300,4.691,301,3.772,302,2.916,303,4.774,304,2.916,305,4.182,306,4.182,307,3.772,308,2.916,309,3.772,310,3.772,311,3.772,312,2.303,313,2.303,314,2.916,315,2.916]],["title/modules.html",[316,2.74]],["body/modules.html",[18,0.056,82,0.056,83,0.056,316,3.111]],["title/overview.html",[317,2.74]],["body/overview.html",[2,0.934,18,0.055,82,0.055,83,0.055,317,3.075,318,3.895]],["title/properties.html",[8,0.611,254,1.709]],["body/properties.html",[8,0.719,18,0.061,33,2.86,82,0.053,83,0.053,297,2.86,298,2.86,299,2.86,312,2.86,313,2.86,319,3.622,320,3.622,321,3.622,322,3.622,323,3.622]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":77,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"coverage.html":{}}}],["0/1",{"_index":246,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":247,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":242,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":209,"title":{},"body":{"classes/Stack.html":{}}}],["1.0.0",{"_index":320,"title":{},"body":{"properties.html":{}}}],["20px",{"_index":296,"title":{},"body":{"index.html":{}}}],["3/5",{"_index":251,"title":{},"body":{"coverage.html":{}}}],["3/8",{"_index":249,"title":{},"body":{"coverage.html":{}}}],["37",{"_index":248,"title":{},"body":{"coverage.html":{}}}],["5/7",{"_index":241,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":250,"title":{},"body":{"coverage.html":{}}}],["71",{"_index":240,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":318,"title":{},"body":{"overview.html":{}}}],["8.3.2",{"_index":256,"title":{},"body":{"dependencies.html":{}}}],["accessors",{"_index":171,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["add",{"_index":27,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{}}}],["added",{"_index":133,"title":{},"body":{"classes/LinkedList.html":{}}}],["addedge",{"_index":11,"title":{},"body":{"classes/Graph.html":{}}}],["addedge(source",{"_index":23,"title":{},"body":{"classes/Graph.html":{}}}],["addnode",{"_index":91,"title":{},"body":{"classes/LinkedList.html":{},"classes/Tree.html":{}}}],["addnode(node",{"_index":216,"title":{},"body":{"classes/Tree.html":{}}}],["addnode(value",{"_index":100,"title":{},"body":{"classes/LinkedList.html":{}}}],["addvertex",{"_index":12,"title":{},"body":{"classes/Graph.html":{}}}],["addvertex(vertex",{"_index":38,"title":{},"body":{"classes/Graph.html":{}}}],["ahuja",{"_index":313,"title":{},"body":{"index.html":{},"properties.html":{}}}],["already",{"_index":274,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["array",{"_index":47,"title":{},"body":{"classes/Graph.html":{}}}],["array.from(vertex.edges",{"_index":65,"title":{},"body":{"classes/Graph.html":{}}}],["associated",{"_index":43,"title":{},"body":{"classes/Graph.html":{}}}],["author",{"_index":323,"title":{},"body":{"properties.html":{}}}],["before",{"_index":130,"title":{},"body":{"classes/LinkedList.html":{},"miscellaneous/enumerations.html":{}}}],["bool",{"_index":191,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["branchnodes",{"_index":154,"title":{},"body":{"classes/Node.html":{}}}],["build",{"_index":310,"title":{},"body":{"index.html":{}}}],["case",{"_index":136,"title":{},"body":{"classes/LinkedList.html":{}}}],["certain",{"_index":107,"title":{},"body":{"classes/LinkedList.html":{}}}],["class",{"_index":0,"title":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"overview.html":{}}}],["comprised",{"_index":51,"title":{},"body":{"classes/Graph.html":{}}}],["const",{"_index":63,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Stack.html":{}}}],["constructor",{"_index":94,"title":{},"body":{"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Vertex.html":{}}}],["constructor(value",{"_index":146,"title":{},"body":{"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Vertex.html":{}}}],["contributors",{"_index":292,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":236,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["current",{"_index":122,"title":{},"body":{"classes/LinkedList.html":{}}}],["current.next",{"_index":124,"title":{},"body":{"classes/LinkedList.html":{}}}],["current.value",{"_index":123,"title":{},"body":{"classes/LinkedList.html":{}}}],["cut",{"_index":284,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["data",{"_index":297,"title":{},"body":{"index.html":{},"properties.html":{}}}],["default",{"_index":16,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}}}],["defined",{"_index":21,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}}}],["dependencies",{"_index":255,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["dequeue",{"_index":168,"title":{},"body":{"classes/Queue.html":{}}}],["description",{"_index":33,"title":{},"body":{"classes/Graph.html":{},"properties.html":{}}}],["destination",{"_index":25,"title":{},"body":{"classes/Graph.html":{}}}],["destination.edges.delete(source.id",{"_index":81,"title":{},"body":{"classes/Graph.html":{}}}],["destination.edges.has(source.id",{"_index":69,"title":{},"body":{"classes/Graph.html":{}}}],["destination.edges.set(source.id",{"_index":73,"title":{},"body":{"classes/Graph.html":{}}}],["destination.edges.size",{"_index":78,"title":{},"body":{"classes/Graph.html":{}}}],["div",{"_index":294,"title":{},"body":{"index.html":{}}}],["docs",{"_index":311,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":237,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dosomestuff",{"_index":245,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["edge",{"_index":28,"title":{},"body":{"classes/Graph.html":{},"miscellaneous/enumerations.html":{}}}],["edge_exits",{"_index":273,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["edges",{"_index":45,"title":{},"body":{"classes/Graph.html":{},"classes/Vertex.html":{},"miscellaneous/enumerations.html":{}}}],["edges_empty",{"_index":272,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["element",{"_index":176,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["empty",{"_index":183,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{},"miscellaneous/enumerations.html":{}}}],["ending",{"_index":35,"title":{},"body":{"classes/Graph.html":{}}}],["enqueue",{"_index":169,"title":{},"body":{"classes/Queue.html":{}}}],["enqueue(item",{"_index":177,"title":{},"body":{"classes/Queue.html":{}}}],["enumerations",{"_index":258,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error(errors.edge_exits",{"_index":71,"title":{},"body":{"classes/Graph.html":{}}}],["error(errors.edges_empty",{"_index":79,"title":{},"body":{"classes/Graph.html":{}}}],["error(errors.invalid_node_position",{"_index":142,"title":{},"body":{"classes/LinkedList.html":{}}}],["error(errors.linked_list_empty",{"_index":127,"title":{},"body":{"classes/LinkedList.html":{}}}],["error(errors.queue_empty",{"_index":188,"title":{},"body":{"classes/Queue.html":{}}}],["error(errors.stack_empty",{"_index":205,"title":{},"body":{"classes/Stack.html":{}}}],["errors",{"_index":56,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"miscellaneous/enumerations.html":{}}}],["errors.enum",{"_index":57,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{}}}],["exists",{"_index":275,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["export",{"_index":58,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"coverage.html":{}}}],["function",{"_index":244,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":288,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":309,"title":{},"body":{"index.html":{}}}],["getedges",{"_index":13,"title":{},"body":{"classes/Graph.html":{}}}],["getedges(vertex",{"_index":41,"title":{},"body":{"classes/Graph.html":{}}}],["getisempty",{"_index":181,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["getnode",{"_index":92,"title":{},"body":{"classes/LinkedList.html":{},"classes/Tree.html":{}}}],["getnode(nodeid",{"_index":218,"title":{},"body":{"classes/Tree.html":{}}}],["getnode(value",{"_index":104,"title":{},"body":{"classes/LinkedList.html":{}}}],["getsize",{"_index":184,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["getting",{"_index":290,"title":{"index.html":{}},"body":{}}],["given",{"_index":113,"title":{},"body":{"classes/LinkedList.html":{}}}],["graph",{"_index":1,"title":{"classes/Graph.html":{}},"body":{"classes/Graph.html":{},"coverage.html":{},"index.html":{}}}],["having",{"_index":106,"title":{},"body":{"classes/LinkedList.html":{}}}],["head",{"_index":88,"title":{},"body":{"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{}}}],["id",{"_index":155,"title":{},"body":{"classes/Node.html":{},"classes/Vertex.html":{}}}],["identifier",{"_index":238,"title":{},"body":{"coverage.html":{}}}],["identifying",{"_index":44,"title":{},"body":{"classes/Graph.html":{}}}],["implemented",{"_index":301,"title":{},"body":{"index.html":{}}}],["import",{"_index":55,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["indicate",{"_index":131,"title":{},"body":{"classes/LinkedList.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}}}],["insert",{"_index":112,"title":{},"body":{"classes/LinkedList.html":{}}}],["inserted",{"_index":129,"title":{},"body":{"classes/LinkedList.html":{}}}],["insertnode",{"_index":93,"title":{},"body":{"classes/LinkedList.html":{}}}],["insertnode(value",{"_index":108,"title":{},"body":{"classes/LinkedList.html":{}}}],["invalid_node_position",{"_index":266,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["isempty",{"_index":172,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["isolated",{"_index":278,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["item",{"_index":179,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["key",{"_index":64,"title":{},"body":{"classes/Graph.html":{}}}],["labeled",{"_index":285,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["leaf",{"_index":279,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["length",{"_index":89,"title":{},"body":{"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{}}}],["library",{"_index":300,"title":{},"body":{"index.html":{}}}],["license",{"_index":321,"title":{},"body":{"properties.html":{}}}],["linked",{"_index":114,"title":{},"body":{"classes/LinkedList.html":{},"miscellaneous/enumerations.html":{}}}],["linked_list_empty",{"_index":265,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["linkedlist",{"_index":84,"title":{"classes/LinkedList.html":{}},"body":{"classes/LinkedList.html":{},"coverage.html":{},"index.html":{}}}],["linkedlistnode",{"_index":96,"title":{"classes/LinkedListNode.html":{}},"body":{"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"coverage.html":{}}}],["linkedlistnode(value",{"_index":119,"title":{},"body":{"classes/LinkedList.html":{}}}],["list",{"_index":103,"title":{},"body":{"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["list.ts",{"_index":87,"title":{},"body":{"classes/LinkedList.html":{},"coverage.html":{}}}],["list.ts:20",{"_index":102,"title":{},"body":{"classes/LinkedList.html":{}}}],["list.ts:39",{"_index":105,"title":{},"body":{"classes/LinkedList.html":{}}}],["list.ts:6",{"_index":97,"title":{},"body":{"classes/LinkedList.html":{}}}],["list.ts:7",{"_index":99,"title":{},"body":{"classes/LinkedList.html":{}}}],["list.ts:71",{"_index":111,"title":{},"body":{"classes/LinkedList.html":{}}}],["list.ts:8",{"_index":95,"title":{},"body":{"classes/LinkedList.html":{}}}],["list/linked",{"_index":86,"title":{},"body":{"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"coverage.html":{}}}],["list/node",{"_index":276,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["madhur",{"_index":312,"title":{},"body":{"index.html":{},"properties.html":{}}}],["map",{"_index":20,"title":{},"body":{"classes/Graph.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}}}],["margin",{"_index":295,"title":{},"body":{"index.html":{}}}],["matching",{"_index":83,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["methods",{"_index":10,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{}}}],["miscellaneous",{"_index":257,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":322,"title":{},"body":{"properties.html":{}}}],["mode",{"_index":308,"title":{},"body":{"index.html":{}}}],["modules",{"_index":316,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["name",{"_index":30,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}}}],["new",{"_index":19,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"coverage.html":{}}}],["newly",{"_index":132,"title":{},"body":{"classes/LinkedList.html":{}}}],["next",{"_index":144,"title":{},"body":{"classes/LinkedListNode.html":{}}}],["node",{"_index":40,"title":{"classes/Node.html":{}},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Node.html":{},"classes/Tree.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["node.next",{"_index":141,"title":{},"body":{"classes/LinkedList.html":{}}}],["node.prev",{"_index":121,"title":{},"body":{"classes/LinkedList.html":{}}}],["node.ts",{"_index":143,"title":{},"body":{"classes/LinkedListNode.html":{},"coverage.html":{}}}],["node.ts:2",{"_index":149,"title":{},"body":{"classes/LinkedListNode.html":{}}}],["node.ts:3",{"_index":148,"title":{},"body":{"classes/LinkedListNode.html":{}}}],["node.ts:4",{"_index":147,"title":{},"body":{"classes/LinkedListNode.html":{}}}],["nodeid",{"_index":220,"title":{},"body":{"classes/Tree.html":{}}}],["nodeposition",{"_index":110,"title":{},"body":{"classes/LinkedList.html":{},"miscellaneous/enumerations.html":{}}}],["nodeposition.after",{"_index":140,"title":{},"body":{"classes/LinkedList.html":{}}}],["nodeposition.before",{"_index":137,"title":{},"body":{"classes/LinkedList.html":{}}}],["nodes",{"_index":213,"title":{},"body":{"classes/Tree.html":{}}}],["nodetobeinserted",{"_index":134,"title":{},"body":{"classes/LinkedList.html":{}}}],["nodetobeinserted.next",{"_index":139,"title":{},"body":{"classes/LinkedList.html":{}}}],["nodetobeinserted.prev",{"_index":138,"title":{},"body":{"classes/LinkedList.html":{}}}],["npm",{"_index":305,"title":{},"body":{"index.html":{}}}],["null",{"_index":116,"title":{},"body":{"classes/LinkedList.html":{},"classes/LinkedListNode.html":{}}}],["number",{"_index":98,"title":{},"body":{"classes/LinkedList.html":{},"classes/Node.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}}}],["optional",{"_index":32,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}}}],["overview",{"_index":317,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":254,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":59,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{}}}],["parameters",{"_index":29,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{}}}],["parent",{"_index":293,"title":{},"body":{"index.html":{}}}],["participant",{"_index":62,"title":{},"body":{"classes/Graph.html":{}}}],["peek",{"_index":170,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["please",{"_index":267,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pop",{"_index":196,"title":{},"body":{"classes/Stack.html":{}}}],["position",{"_index":109,"title":{},"body":{"classes/LinkedList.html":{},"miscellaneous/enumerations.html":{}}}],["position.ts",{"_index":261,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["prev",{"_index":145,"title":{},"body":{"classes/LinkedListNode.html":{}}}],["private",{"_index":226,"title":{},"body":{"classes/Vertex.html":{}}}],["project",{"_index":304,"title":{},"body":{"index.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"properties.html":{}}}],["provide",{"_index":268,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["push",{"_index":197,"title":{},"body":{"classes/Stack.html":{}}}],["push(item",{"_index":201,"title":{},"body":{"classes/Stack.html":{}}}],["queue",{"_index":165,"title":{"classes/Queue.html":{}},"body":{"classes/Queue.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["queue_empty",{"_index":271,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["rajdeep",{"_index":314,"title":{},"body":{"index.html":{}}}],["ratan",{"_index":315,"title":{},"body":{"index.html":{}}}],["reference",{"_index":61,"title":{},"body":{"classes/Graph.html":{}}}],["remove",{"_index":50,"title":{},"body":{"classes/Graph.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"miscellaneous/enumerations.html":{}}}],["removeedge",{"_index":14,"title":{},"body":{"classes/Graph.html":{}}}],["removeedge(source",{"_index":48,"title":{},"body":{"classes/Graph.html":{}}}],["removenode",{"_index":214,"title":{},"body":{"classes/Tree.html":{}}}],["removenode(node",{"_index":126,"title":{},"body":{"classes/LinkedList.html":{},"classes/Tree.html":{}}}],["removes",{"_index":125,"title":{},"body":{"classes/LinkedList.html":{}}}],["removevertex",{"_index":15,"title":{},"body":{"classes/Graph.html":{}}}],["removevertex(vertex",{"_index":53,"title":{},"body":{"classes/Graph.html":{}}}],["requested",{"_index":46,"title":{},"body":{"classes/Graph.html":{}}}],["results",{"_index":82,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":74,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{}}}],["returns",{"_index":36,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{}}}],["right",{"_index":162,"title":{},"body":{"classes/Node.html":{},"index.html":{}}}],["run",{"_index":306,"title":{},"body":{"index.html":{}}}],["simplical",{"_index":282,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["simplicial",{"_index":281,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sink",{"_index":280,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["size",{"_index":173,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"miscellaneous/enumerations.html":{}}}],["source.edges.delete(destination.id",{"_index":80,"title":{},"body":{"classes/Graph.html":{}}}],["source.edges.has(destination.id",{"_index":68,"title":{},"body":{"classes/Graph.html":{}}}],["source.edges.set(destination.id",{"_index":72,"title":{},"body":{"classes/Graph.html":{}}}],["source.edges.size",{"_index":76,"title":{},"body":{"classes/Graph.html":{}}}],["src/.../errors.enum.ts",{"_index":259,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../index.ts",{"_index":289,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../node",{"_index":260,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../vertex",{"_index":262,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/errors.enum.ts",{"_index":264,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/graph/graph.ts",{"_index":6,"title":{},"body":{"classes/Graph.html":{},"coverage.html":{}}}],["src/graph/graph.ts:11",{"_index":39,"title":{},"body":{"classes/Graph.html":{}}}],["src/graph/graph.ts:20",{"_index":54,"title":{},"body":{"classes/Graph.html":{}}}],["src/graph/graph.ts:35",{"_index":26,"title":{},"body":{"classes/Graph.html":{}}}],["src/graph/graph.ts:49",{"_index":42,"title":{},"body":{"classes/Graph.html":{}}}],["src/graph/graph.ts:5",{"_index":22,"title":{},"body":{"classes/Graph.html":{}}}],["src/graph/graph.ts:58",{"_index":49,"title":{},"body":{"classes/Graph.html":{}}}],["src/graph/vertex",{"_index":277,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/graph/vertex.ts",{"_index":225,"title":{},"body":{"classes/Vertex.html":{},"coverage.html":{}}}],["src/graph/vertex.ts:5",{"_index":231,"title":{},"body":{"classes/Vertex.html":{}}}],["src/graph/vertex.ts:6",{"_index":229,"title":{},"body":{"classes/Vertex.html":{}}}],["src/graph/vertex.ts:7",{"_index":232,"title":{},"body":{"classes/Vertex.html":{}}}],["src/graph/vertex.ts:8",{"_index":228,"title":{},"body":{"classes/Vertex.html":{}}}],["src/index.ts",{"_index":243,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/linked",{"_index":85,"title":{},"body":{"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/queue/queue.ts",{"_index":166,"title":{},"body":{"classes/Queue.html":{},"coverage.html":{}}}],["src/queue/queue.ts:10",{"_index":178,"title":{},"body":{"classes/Queue.html":{}}}],["src/queue/queue.ts:18",{"_index":175,"title":{},"body":{"classes/Queue.html":{}}}],["src/queue/queue.ts:29",{"_index":180,"title":{},"body":{"classes/Queue.html":{}}}],["src/queue/queue.ts:4",{"_index":174,"title":{},"body":{"classes/Queue.html":{}}}],["src/queue/queue.ts:40",{"_index":182,"title":{},"body":{"classes/Queue.html":{}}}],["src/queue/queue.ts:48",{"_index":185,"title":{},"body":{"classes/Queue.html":{}}}],["src/stack/stack.ts",{"_index":195,"title":{},"body":{"classes/Stack.html":{},"coverage.html":{}}}],["src/stack/stack.ts:17",{"_index":200,"title":{},"body":{"classes/Stack.html":{}}}],["src/stack/stack.ts:3",{"_index":198,"title":{},"body":{"classes/Stack.html":{}}}],["src/stack/stack.ts:30",{"_index":199,"title":{},"body":{"classes/Stack.html":{}}}],["src/stack/stack.ts:41",{"_index":203,"title":{},"body":{"classes/Stack.html":{}}}],["src/stack/stack.ts:49",{"_index":204,"title":{},"body":{"classes/Stack.html":{}}}],["src/stack/stack.ts:9",{"_index":202,"title":{},"body":{"classes/Stack.html":{}}}],["src/tree/node.ts",{"_index":153,"title":{},"body":{"classes/Node.html":{},"coverage.html":{}}}],["src/tree/node.ts:4",{"_index":157,"title":{},"body":{"classes/Node.html":{}}}],["src/tree/node.ts:5",{"_index":158,"title":{},"body":{"classes/Node.html":{}}}],["src/tree/node.ts:6",{"_index":156,"title":{},"body":{"classes/Node.html":{}}}],["src/tree/tree.ts",{"_index":212,"title":{},"body":{"classes/Tree.html":{},"coverage.html":{}}}],["src/tree/tree.ts:10",{"_index":217,"title":{},"body":{"classes/Tree.html":{}}}],["src/tree/tree.ts:18",{"_index":221,"title":{},"body":{"classes/Tree.html":{}}}],["src/tree/tree.ts:26",{"_index":219,"title":{},"body":{"classes/Tree.html":{}}}],["src/tree/tree.ts:4",{"_index":215,"title":{},"body":{"classes/Tree.html":{}}}],["stack",{"_index":194,"title":{"classes/Stack.html":{}},"body":{"classes/Stack.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["stack_empty",{"_index":270,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["started",{"_index":291,"title":{"index.html":{}},"body":{}}],["starting",{"_index":34,"title":{},"body":{"classes/Graph.html":{}}}],["statements",{"_index":239,"title":{},"body":{"coverage.html":{}}}],["store",{"_index":167,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["structures",{"_index":298,"title":{},"body":{"index.html":{},"properties.html":{}}}],["switch",{"_index":135,"title":{},"body":{"classes/LinkedList.html":{}}}],["t",{"_index":101,"title":{},"body":{"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Vertex.html":{}}}],["table",{"_index":253,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":252,"title":{},"body":{"coverage.html":{}}}],["tail",{"_index":90,"title":{},"body":{"classes/LinkedList.html":{}}}],["test",{"_index":303,"title":{},"body":{"index.html":{}}}],["this.branchnodes",{"_index":164,"title":{},"body":{"classes/Node.html":{}}}],["this.head",{"_index":115,"title":{},"body":{"classes/LinkedList.html":{}}}],["this.head.next",{"_index":128,"title":{},"body":{"classes/LinkedList.html":{}}}],["this.id",{"_index":163,"title":{},"body":{"classes/Node.html":{},"classes/Vertex.html":{}}}],["this.isempty",{"_index":187,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["this.length",{"_index":118,"title":{},"body":{"classes/LinkedList.html":{}}}],["this.next",{"_index":151,"title":{},"body":{"classes/LinkedListNode.html":{}}}],["this.nodes.delete(node.id",{"_index":223,"title":{},"body":{"classes/Tree.html":{}}}],["this.nodes.get(nodeid",{"_index":224,"title":{},"body":{"classes/Tree.html":{}}}],["this.nodes.set(node.id",{"_index":222,"title":{},"body":{"classes/Tree.html":{}}}],["this.peek",{"_index":207,"title":{},"body":{"classes/Stack.html":{}}}],["this.prev",{"_index":152,"title":{},"body":{"classes/LinkedListNode.html":{}}}],["this.size",{"_index":192,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["this.store.length",{"_index":193,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["this.store.push(item",{"_index":186,"title":{},"body":{"classes/Queue.html":{},"classes/Stack.html":{}}}],["this.store.shift",{"_index":189,"title":{},"body":{"classes/Queue.html":{}}}],["this.store.splice(this.size",{"_index":208,"title":{},"body":{"classes/Stack.html":{}}}],["this.store[0",{"_index":190,"title":{},"body":{"classes/Queue.html":{}}}],["this.store[this.size",{"_index":210,"title":{},"body":{"classes/Stack.html":{}}}],["this.tail",{"_index":117,"title":{},"body":{"classes/LinkedList.html":{}}}],["this.tail.next",{"_index":120,"title":{},"body":{"classes/LinkedList.html":{}}}],["this.types",{"_index":234,"title":{},"body":{"classes/Vertex.html":{}}}],["this.value",{"_index":150,"title":{},"body":{"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Vertex.html":{}}}],["this.vertices.delete(vertex.id",{"_index":67,"title":{},"body":{"classes/Graph.html":{}}}],["this.vertices.set(vertex.id",{"_index":60,"title":{},"body":{"classes/Graph.html":{}}}],["throw",{"_index":70,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{}}}],["topitem",{"_index":206,"title":{},"body":{"classes/Stack.html":{}}}],["tree",{"_index":211,"title":{"classes/Tree.html":{}},"body":{"classes/Tree.html":{},"coverage.html":{}}}],["treeto",{"_index":302,"title":{},"body":{"index.html":{}}}],["two",{"_index":52,"title":{},"body":{"classes/Graph.html":{}}}],["type",{"_index":31,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"coverage.html":{}}}],["type.enum",{"_index":233,"title":{},"body":{"classes/Vertex.html":{}}}],["type.enum.ts",{"_index":263,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["types",{"_index":227,"title":{},"body":{"classes/Vertex.html":{}}}],["typescript",{"_index":299,"title":{},"body":{"index.html":{},"properties.html":{}}}],["universal",{"_index":283,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unlabeled",{"_index":286,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unlabled",{"_index":287,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["uuid",{"_index":161,"title":{},"body":{"classes/Node.html":{},"classes/Vertex.html":{},"dependencies.html":{}}}],["uuidv4",{"_index":160,"title":{},"body":{"classes/Node.html":{},"classes/Vertex.html":{}}}],["v4",{"_index":159,"title":{},"body":{"classes/Node.html":{},"classes/Vertex.html":{}}}],["valid",{"_index":269,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["value",{"_index":17,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/LinkedListNode.html":{},"classes/Node.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{},"classes/Vertex.html":{},"miscellaneous/enumerations.html":{}}}],["value.edges.delete(vertex.id",{"_index":66,"title":{},"body":{"classes/Graph.html":{}}}],["version",{"_index":319,"title":{},"body":{"properties.html":{}}}],["vertex",{"_index":24,"title":{"classes/Vertex.html":{}},"body":{"classes/Graph.html":{},"classes/Vertex.html":{},"coverage.html":{}}}],["vertex.edges",{"_index":75,"title":{},"body":{"classes/Graph.html":{}}}],["vertextype",{"_index":230,"title":{},"body":{"classes/Vertex.html":{},"miscellaneous/enumerations.html":{}}}],["vertextype.labeled",{"_index":235,"title":{},"body":{"classes/Vertex.html":{}}}],["vertices",{"_index":9,"title":{},"body":{"classes/Graph.html":{}}}],["void",{"_index":37,"title":{},"body":{"classes/Graph.html":{},"classes/LinkedList.html":{},"classes/Queue.html":{},"classes/Stack.html":{},"classes/Tree.html":{}}}],["watch",{"_index":307,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Graph.html":{"url":"classes/Graph.html","title":"class - Graph","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Graph\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/graph/graph.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                vertices\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addEdge\n                            \n                            \n                                addVertex\n                            \n                            \n                                getEdges\n                            \n                            \n                                removeEdge\n                            \n                            \n                                removeVertex\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        vertices\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/graph/graph.ts:5\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addEdge\n                        \n                    \n                \n            \n            \n                \naddEdge(source: Vertex, destination: Vertex)\n                \n            \n\n\n            \n                \n                    Defined in src/graph/graph.ts:35\n                \n            \n\n\n            \n                \n                    To Add edge in the graph\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    source\n                                    \n                                                Vertex\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        starting of the edge\n\n                                    \n                                \n                                \n                                    destination\n                                    \n                                                Vertex\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ending of the edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addVertex\n                        \n                    \n                \n            \n            \n                \naddVertex(vertex: Vertex)\n                \n            \n\n\n            \n                \n                    Defined in src/graph/graph.ts:11\n                \n            \n\n\n            \n                \n                    To add node in the graph\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    vertex\n                                    \n                                                Vertex\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdges\n                        \n                    \n                \n            \n            \n                \ngetEdges(vertex: Vertex)\n                \n            \n\n\n            \n                \n                    Defined in src/graph/graph.ts:49\n                \n            \n\n\n            \n                \n                    To get the associated vertices identifying the edges of a vertex\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    vertex\n                                    \n                                                Vertex\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        vertex for which the edges have been requested.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        array of vertices\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeEdge\n                        \n                    \n                \n            \n            \n                \nremoveEdge(source: Vertex, destination: Vertex)\n                \n            \n\n\n            \n                \n                    Defined in src/graph/graph.ts:58\n                \n            \n\n\n            \n                \n                    To remove the edge comprised of two vertices\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    source\n                                    \n                                                Vertex\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        starting of the edge\n\n                                    \n                                \n                                \n                                    destination\n                                    \n                                                Vertex\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ending of the edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeVertex\n                        \n                    \n                \n            \n            \n                \nremoveVertex(vertex: Vertex)\n                \n            \n\n\n            \n                \n                    Defined in src/graph/graph.ts:20\n                \n            \n\n\n            \n                \n                    To remove a node from graph\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    vertex\n                                    \n                                                Vertex\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Errors } from '../errors.enum';\nimport Vertex from './vertex';\n\nexport default class Graph {\n  vertices = new Map();\n\n  /**\n   * To add node in the graph\n   * @param vertex\n   */\n  addVertex(vertex: Vertex) {\n    this.vertices.set(vertex.id, vertex);\n  }\n\n  /**\n   * To remove a node from graph\n   * @param source\n   * @returns\n   */\n  removeVertex(vertex: Vertex) {\n    // Remove the reference of vertex from all the edges where it was a participant\n    for (const [key, value] of Array.from(vertex.edges)) {\n      value.edges.delete(vertex.id);\n    }\n\n    this.vertices.delete(vertex.id);\n  }\n\n  /**\n   * To Add edge in the graph\n   * @param source starting of the edge\n   * @param destination ending of the edge\n   * @returns\n   */\n  addEdge(source: Vertex, destination: Vertex) {\n    if (source.edges.has(destination.id) && destination.edges.has(source.id)) {\n      throw new Error(Errors.EDGE_EXITS);\n    }\n\n    source.edges.set(destination.id, destination);\n    destination.edges.set(source.id, source);\n  }\n\n  /**\n   * To get the associated vertices identifying the edges of a vertex\n   * @param vertex vertex for which the edges have been requested.\n   * @returns array of vertices\n   */\n  getEdges(vertex: Vertex) {\n    return vertex.edges;\n  }\n\n  /**\n   * To remove the edge comprised of two vertices\n   * @param source starting of the edge\n   * @param destination ending of the edge\n   */\n  removeEdge(source: Vertex, destination: Vertex) {\n    if (source.edges.size === 0 || destination.edges.size === 0) {\n      throw new Error(Errors.EDGES_EMPTY);\n    }\n\n    source.edges.delete(destination.id);\n    destination.edges.delete(source.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LinkedList.html":{"url":"classes/LinkedList.html","title":"class - LinkedList","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LinkedList\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/linked-list/linked-list.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                head\n                            \n                            \n                                length\n                            \n                            \n                                tail\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addNode\n                            \n                            \n                                getNode\n                            \n                            \n                                insertNode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/linked-list/linked-list.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        head\n                        \n                    \n                \n            \n                \n                    \n                        Type :     LinkedListNode\n\n                    \n                \n                    \n                        \n                                Defined in src/linked-list/linked-list.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/linked-list/linked-list.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tail\n                        \n                    \n                \n            \n                \n                    \n                        Type :     LinkedListNode\n\n                    \n                \n                    \n                        \n                                Defined in src/linked-list/linked-list.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addNode\n                        \n                    \n                \n            \n            \n                \naddNode(value: T)\n                \n            \n\n\n            \n                \n                    Defined in src/linked-list/linked-list.ts:20\n                \n            \n\n\n            \n                \n                    To add a new node to the list at the tail.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNode\n                        \n                    \n                \n            \n            \n                \ngetNode(value: T)\n                \n            \n\n\n            \n                \n                    Defined in src/linked-list/linked-list.ts:39\n                \n            \n\n\n            \n                \n                    Get the node having a certain value\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     LinkedListNode\n\n                    \n                    \n                        LinkedListNode\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insertNode\n                        \n                    \n                \n            \n            \n                \ninsertNode(value: T, node: LinkedListNode, position: NodePosition)\n                \n            \n\n\n            \n                \n                    Defined in src/linked-list/linked-list.ts:71\n                \n            \n\n\n            \n                \n                    To insert a node at a given position in the linked list.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    node\n                                    \n                                            LinkedListNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    position\n                                    \n                                                NodePosition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Errors } from '../errors.enum';\nimport LinkedListNode from './linked-list-node';\nimport { NodePosition } from './node-position';\n\nexport default class LinkedList {\n    head: LinkedListNode;\n    tail: LinkedListNode;\n    length: number;\n\n    constructor() {\n        this.head = null;\n        this.tail = null;\n        this.length = 0;\n    }\n\n    /**\n     * To add a new node to the list at the tail.\n     * @param value\n     */\n    addNode(value: T): void {\n        const node = new LinkedListNode(value);\n\n        if (this.length === 0) {\n            this.head = node;\n            this.tail = node;\n        } else {\n            this.tail.next = node;\n            node.prev = this.tail;\n            this.tail = node;\n        }\n        this.length++;\n    }\n\n    /**\n     * Get the node having a certain value\n     * @param value\n     * @returns LinkedListNode\n     */\n    getNode(value: T): LinkedListNode {\n        let current = this.head;\n\n        while (current) {\n            if (current.value === value) {\n                return current;\n            }\n            current = current.next;\n        }\n    }\n\n    /**\n     * Removes a node from the list\n     * @param node\n     * @returns\n     */\n    // removeNode(node: LinkedListNode): void {\n    //   if (this.length === 0) {\n    //     throw new Error(Errors.LINKED_LIST_EMPTY);\n    //   }\n\n    //   if (this.head === node) {\n    //     this.head === this.head.next;\n    //   }\n    // }\n\n    /**\n     * To insert a node at a given position in the linked list.\n     * @param value Value of the node to be inserted\n     * @param node The node before or after which the new node is inserted\n     * @param position To indicate the position of the newly added node - BEFORE, AFTER\n     */\n    insertNode(value: T, node: LinkedListNode, position: NodePosition) {\n        if (this.length === 0) {\n            throw new Error(Errors.LINKED_LIST_EMPTY);\n        }\n        const nodeToBeInserted = new LinkedListNode(value);\n\n        switch (position) {\n            case NodePosition.BEFORE:\n                nodeToBeInserted.prev = node.prev;\n                nodeToBeInserted.next = node;\n                node.prev = nodeToBeInserted;\n                this.length++;\n                return nodeToBeInserted;\n\n            case NodePosition.AFTER:\n                nodeToBeInserted.next = node.next;\n                nodeToBeInserted.prev = node;\n                node.next = nodeToBeInserted;\n                this.length++;\n                return nodeToBeInserted;\n\n            default:\n                throw new Error(Errors.INVALID_NODE_POSITION);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LinkedListNode.html":{"url":"classes/LinkedListNode.html","title":"class - LinkedListNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LinkedListNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/linked-list/linked-list-node.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                next\n                            \n                            \n                                prev\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value: T, next: LinkedListNode, prev: LinkedListNode)\n                    \n                \n                        \n                            \n                                Defined in src/linked-list/linked-list-node.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        next\n                                                  \n                                                        \n                                                                    LinkedListNode\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prev\n                                                  \n                                                        \n                                                                    LinkedListNode\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        next\n                        \n                    \n                \n            \n                \n                    \n                        Type :     LinkedListNode | null\n\n                    \n                \n                    \n                        \n                                Defined in src/linked-list/linked-list-node.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prev\n                        \n                    \n                \n            \n                \n                    \n                        Type :     LinkedListNode | null\n\n                    \n                \n                    \n                        \n                                Defined in src/linked-list/linked-list-node.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T\n\n                    \n                \n                    \n                        \n                                Defined in src/linked-list/linked-list-node.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export default class LinkedListNode {\n    value: T;\n    next: LinkedListNode | null;\n    prev: LinkedListNode | null;\n\n    constructor(\n        value: T,\n        next: LinkedListNode = null,\n        prev: LinkedListNode = null\n    ) {\n        this.value = value;\n        this.next = next;\n        this.prev = prev;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Node.html":{"url":"classes/Node.html","title":"class - Node","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Node\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tree/node.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                branchNodes\n                            \n                            \n                                id\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value: T, branchNodes: Node[])\n                    \n                \n                        \n                            \n                                Defined in src/tree/node.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        branchNodes\n                                                  \n                                                        \n                                                                        Node[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        branchNodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Node[]\n\n                    \n                \n                    \n                        \n                                Defined in src/tree/node.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/tree/node.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T\n\n                    \n                \n                    \n                        \n                                Defined in src/tree/node.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { v4 as uuidv4 } from 'uuid';\n\nexport default class Node {\n    id: number;\n    value: T;\n    branchNodes: Node[];\n    //right: Node[];\n\n    constructor(value: T, branchNodes: Node[]) {\n        this.id = uuidv4();\n        this.value = value;\n        this.branchNodes = branchNodes;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Queue.html":{"url":"classes/Queue.html","title":"class - Queue","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Queue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/queue/queue.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                store\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                dequeue\n                            \n                            \n                                enqueue\n                            \n                            \n                                peek\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isEmpty\n                                \n                                \n                                    size\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/queue/queue.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        dequeue\n                        \n                    \n                \n            \n            \n                \ndequeue()\n                \n            \n\n\n            \n                \n                    Defined in src/queue/queue.ts:18\n                \n            \n\n\n            \n                \n                    To get the head element of the queue and remove the head\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        T\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enqueue\n                        \n                    \n                \n            \n            \n                \nenqueue(item: T)\n                \n            \n\n\n            \n                \n                    Defined in src/queue/queue.ts:10\n                \n            \n\n\n            \n                \n                    To add item to the queue\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        peek\n                        \n                    \n                \n            \n            \n                \npeek()\n                \n            \n\n\n            \n                \n                    Defined in src/queue/queue.ts:29\n                \n            \n\n\n            \n                \n                    Get head element of the queue\n\n\n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        T\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isEmpty\n                    \n                \n\n                \n                    \n                        getisEmpty()\n                    \n                \n                            \n                                \n                                    Defined in src/queue/queue.ts:40\n                                \n                            \n                    \n                        \n                                Get if the queue is empty or not\n\n\n                                \n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        size\n                    \n                \n\n                \n                    \n                        getsize()\n                    \n                \n                            \n                                \n                                    Defined in src/queue/queue.ts:48\n                                \n                            \n                    \n                        \n                                Get the size of queue\n\n\n                                \n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Errors } from '../errors.enum';\n\nexport default class Queue {\n    store: T[] = [];\n\n    /**\n     * To add item to the queue\n     * @param item\n     */\n    enqueue(item: T) {\n        this.store.push(item);\n    }\n\n    /**\n     * To get the head element of the queue and remove the head\n     * @returns T\n     */\n    dequeue() {\n        if (this.isEmpty) {\n            throw new Error(Errors.QUEUE_EMPTY);\n        }\n        return this.store.shift();\n    }\n\n    /**\n     * Get head element of the queue\n     * @returns T\n     */\n    peek(): T {\n        if (this.isEmpty) {\n            throw new Error(Errors.QUEUE_EMPTY);\n        }\n        return this.store[0];\n    }\n\n    /**\n     * Get if the queue is empty or not\n     * @returns bool\n     */\n    get isEmpty() {\n        return this.size === 0;\n    }\n\n    /**\n     * Get the size of queue\n     * @returns length\n     */\n    get size() {\n        return this.store.length;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Stack.html":{"url":"classes/Stack.html","title":"class - Stack","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Stack\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stack/stack.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                store\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                peek\n                            \n                            \n                                pop\n                            \n                            \n                                push\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    isEmpty\n                                \n                                \n                                    size\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/stack/stack.ts:3\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        peek\n                        \n                    \n                \n            \n            \n                \npeek()\n                \n            \n\n\n            \n                \n                    Defined in src/stack/stack.ts:30\n                \n            \n\n\n            \n                \n                    Get head element of the stack\n\n\n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        T\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pop\n                        \n                    \n                \n            \n            \n                \npop()\n                \n            \n\n\n            \n                \n                    Defined in src/stack/stack.ts:17\n                \n            \n\n\n            \n                \n                    To get the head element of the stack and remove the head\n\n\n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        T\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        push\n                        \n                    \n                \n            \n            \n                \npush(item: T)\n                \n            \n\n\n            \n                \n                    Defined in src/stack/stack.ts:9\n                \n            \n\n\n            \n                \n                    To add item to the stack\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        isEmpty\n                    \n                \n\n                \n                    \n                        getisEmpty()\n                    \n                \n                            \n                                \n                                    Defined in src/stack/stack.ts:41\n                                \n                            \n                    \n                        \n                                Get if the stack is empty or not\n\n\n                                \n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        size\n                    \n                \n\n                \n                    \n                        getsize()\n                    \n                \n                            \n                                \n                                    Defined in src/stack/stack.ts:49\n                                \n                            \n                    \n                        \n                                Get the size of stack\n\n\n                                \n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Errors } from '../errors.enum';\nexport default class Stack {\n    store: T[] = [];\n\n    /**\n     * To add item to the stack\n     * @param item\n     */\n    push(item: T) {\n        this.store.push(item);\n    }\n\n    /**\n     * To get the head element of the stack and remove the head\n     * @returns T\n     */\n    pop(): T {\n        if (this.isEmpty) {\n            throw new Error(Errors.STACK_EMPTY);\n        }\n        const topItem = this.peek();\n        this.store.splice(this.size - 1);\n        return topItem;\n    }\n\n    /**\n     * Get head element of the stack\n     * @returns T\n     */\n    peek(): T {\n        if (this.isEmpty) {\n            throw new Error(Errors.STACK_EMPTY);\n        }\n        return this.store[this.size - 1];\n    }\n\n    /**\n     * Get if the stack is empty or not\n     * @returns bool\n     */\n    get isEmpty() {\n        return this.size === 0;\n    }\n\n    /**\n     * Get the size of stack\n     * @returns length\n     */\n    get size() {\n        return this.store.length;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tree.html":{"url":"classes/Tree.html","title":"class - Tree","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tree\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tree/tree.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                nodes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addNode\n                            \n                            \n                                getNode\n                            \n                            \n                                removeNode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        nodes\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/tree/tree.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addNode\n                        \n                    \n                \n            \n            \n                \naddNode(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in src/tree/tree.ts:10\n                \n            \n\n\n            \n                \n                    To add a node in the tree\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNode\n                        \n                    \n                \n            \n            \n                \ngetNode(nodeId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/tree/tree.ts:26\n                \n            \n\n\n            \n                \n                    To get a node from the tree\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodeId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeNode\n                        \n                    \n                \n            \n            \n                \nremoveNode(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in src/tree/tree.ts:18\n                \n            \n\n\n            \n                \n                    To remove a node from the tree\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import Node from './node';\n\nexport default class Tree {\n    nodes = new Map();\n\n    /**\n     * To add a node in the tree\n     * @param node\n     */\n    addNode(node: Node) {\n        this.nodes.set(node.id, node);\n    }\n\n    /**\n     * To remove a node from the tree\n     * @param node\n     */\n    removeNode(node: Node) {\n        this.nodes.delete(node.id);\n    }\n\n    /**\n     * To get a node from the tree\n     * @param nodeId\n     */\n    getNode(nodeId: number) {\n        return this.nodes.get(nodeId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Vertex.html":{"url":"classes/Vertex.html","title":"class - Vertex","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Vertex\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/graph/vertex.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                edges\n                            \n                            \n                                id\n                            \n                            \n                                    Private\n                                types\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value: T)\n                    \n                \n                        \n                            \n                                Defined in src/graph/vertex.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        edges\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/graph/vertex.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/graph/vertex.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        types\n                        \n                    \n                \n            \n                \n                    \n                        Type :         VertexType[]\n\n                    \n                \n                    \n                        \n                                Defined in src/graph/vertex.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T\n\n                    \n                \n                    \n                        \n                                Defined in src/graph/vertex.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { VertexType } from './vertex-type.enum';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport default class Vertex {\n  private types: VertexType[];\n  id: number;\n  value: T;\n  edges?: Map> = new Map();\n\n  constructor(value: T) {\n    this.id = uuidv4();\n    this.value = value;\n    this.types = [VertexType.LABELED];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/graph/graph.ts\n            \n            class\n            Graph\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/graph/vertex.ts\n            \n            class\n            Vertex\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/index.ts\n            \n            function\n            doSomeStuff\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/linked-list/linked-list-node.ts\n            \n            class\n            LinkedListNode\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/linked-list/linked-list.ts\n            \n            class\n            LinkedList\n            \n                37 %\n                (3/8)\n            \n        \n        \n            \n                \n                src/queue/queue.ts\n            \n            class\n            Queue\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/stack/stack.ts\n            \n            class\n            Stack\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/tree/node.ts\n            \n            class\n            Node\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/tree/tree.ts\n            \n            class\n            Tree\n            \n                60 %\n                (3/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            uuid : ^8.3.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Errors   (src/.../errors.enum.ts)\n                        \n                        \n                            NodePosition   (src/.../node-position.ts)\n                        \n                        \n                            VertexType   (src/.../vertex-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/errors.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Errors\n                    \n                \n                        \n                            \n                                 LINKED_LIST_EMPTY\n                            \n                        \n                        \n                            \n                                Value : The linked list is empty\n                            \n                        \n                        \n                            \n                                 INVALID_NODE_POSITION\n                            \n                        \n                        \n                            \n                                Value : Please provide a valid node position\n                            \n                        \n                        \n                            \n                                 STACK_EMPTY\n                            \n                        \n                        \n                            \n                                Value : The stack is empty\n                            \n                        \n                        \n                            \n                                 QUEUE_EMPTY\n                            \n                        \n                        \n                            \n                                Value : The queue is empty\n                            \n                        \n                        \n                            \n                                 EDGES_EMPTY\n                            \n                        \n                        \n                            \n                                Value : There are no edges to remove\n                            \n                        \n                        \n                            \n                                 EDGE_EXITS\n                            \n                        \n                        \n                            \n                                Value : Edge already exists\n                            \n                        \n            \n        \n\n    src/linked-list/node-position.ts\n    \n        \n            \n                \n                    \n                        \n                        NodePosition\n                    \n                \n                        \n                            \n                                 BEFORE\n                            \n                        \n                        \n                            \n                                 AFTER\n                            \n                        \n            \n        \n\n    src/graph/vertex-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        VertexType\n                    \n                \n                        \n                            \n                                 ISOLATED\n                            \n                        \n                        \n                            \n                                Value : Isolated\n                            \n                        \n                        \n                            \n                                 LEAF\n                            \n                        \n                        \n                            \n                                Value : Leaf\n                            \n                        \n                        \n                            \n                                 SOURCE\n                            \n                        \n                        \n                            \n                                Value : Source\n                            \n                        \n                        \n                            \n                                 SINK\n                            \n                        \n                        \n                            \n                                Value : Sink\n                            \n                        \n                        \n                            \n                                 SIMPLICIAL\n                            \n                        \n                        \n                            \n                                Value : Simplical\n                            \n                        \n                        \n                            \n                                 UNIVERSAL\n                            \n                        \n                        \n                            \n                                Value : Universal\n                            \n                        \n                        \n                            \n                                 CUT\n                            \n                        \n                        \n                            \n                                Value : Cut\n                            \n                        \n                        \n                            \n                                 LABELED\n                            \n                        \n                        \n                            \n                                Value : Labeled\n                            \n                        \n                        \n                            \n                                 UNLABELED\n                            \n                        \n                        \n                            \n                                Value : Unlabled\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            doSomeStuff   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        doSomeStuff\n                        \n                    \n                \n            \n            \n                \ndoSomeStuff()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n#contributors-parent > div{\n    margin-right: 20px;\n}\n\n\n\n\nData Structures in Typescript\nLibrary of data structures implemented in Typescript.\nData structures implemented in this library\n\nGraph\nLinkedList\nQueue\nStack\nTreeTo test the project\n\nnpm run test - To test the library\ntest-watch - To test the library in watch mode\ntest-coverage - To generate the test coverage\nnpm run build - To build the library\nnpm run docs - To generate the docs\n\nLibrary documentation\n\nDocumentation\n\nContributors\n\n\n\nMadhur Ahuja\n\n\n\nRajdeep Ratan\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0\n        \n            Description : Data Structures in TypeScript\n        \n            License : MIT\n        \n            Author : Madhur Ahuja\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
